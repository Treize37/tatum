=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module SwaggerClient
  class LedgerAccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate account
    # <h4>2 credits per API call.</h4><br/><p>Activates an account.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_account(id, opts = {})
      activate_account_with_http_info(id, opts)
      nil
    end

    # Activate account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Activates an account.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def activate_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.activate_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.activate_account"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}/activate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#activate_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Block an amount in an account
    # <h4>2 credits per API call.</h4><br/> <p>Blocks an amount in an account. Any number of distinct amounts can be blocked in one account. Every new blockage has its own distinct ID, which is used as a reference. When the amount is blocked, it is debited from the available balance of the account. The account balance remains the same. The account balance represents the total amount of funds in the account. The available balance represents the total amount of funds that can be used to perform transactions. When an account is frozen, the available balance is set to 0 minus all blockages for the account.</p> 
    # @param body 
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def block_amount(body, id, opts = {})
      data, _status_code, _headers = block_amount_with_http_info(body, id, opts)
      data
    end

    # Block an amount in an account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Blocks an amount in an account. Any number of distinct amounts can be blocked in one account. Every new blockage has its own distinct ID, which is used as a reference. When the amount is blocked, it is debited from the available balance of the account. The account balance remains the same. The account balance represents the total amount of funds in the account. The available balance represents the total amount of funds that can be used to perform transactions. When an account is frozen, the available balance is set to 0 minus all blockages for the account.&lt;/p&gt; 
    # @param body 
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def block_amount_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.block_amount ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerAccountApi.block_amount"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.block_amount"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Id' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#block_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create new account
    # <h4>2 credits per API call.</h4><br/> <p>Creates a new account for the customer. This will create an account on Tatum Private Ledger. It is possible to create an account for every supported cryptocurrency, FIAT, any ERC20 token created within a Tatum instance, and Tatum virtual currencies. When the customer field is already present, the account is added to the customer's list of accounts. If the customer field is not present, a new customer is created along with the account.<br/> Every account has its own balance. Tatum supports 2 types of balances - accountBalance and availableBalance. The account balance represents all assets in the account, both available and blocked. The available balance in the account represents account balance minus the blocked amount in the account. The available balance should be used to determine how much a customer can send or withdraw from the account.<br/> An account is always created with a specific currency. Once the currency is set, it cannot be changed.<br/> When an account's currency is blockchain-based, like BTC or ETH, the account is usually created with xpub. Xpub represents an extended public key of the blockchain wallet, which will be connected to this account. Adding xpub to the account does not connect any specific blockchain address to this account. Xpub is just a generator of addresses, not an address itself. Every blockchain has different types of xpubs: <ul> <li><b>BTC</b> - xpub can be obtained from <a href=\"#operation/BtcGenerateWallet\">generate wallet</a></li> <li><b>LTC</b> - xpub can be obtained from <a href=\"#operation/LtcGenerateWallet\">generate wallet</a></li> <li><b>DOGE</b> - xpub can be obtained from <a href=\"#operation/DogeGenerateWallet\">generate wallet</a></li> <li><b>BCH</b> - xpub can be obtained from <a href=\"#operation/BchGenerateWallet\">generate wallet</a></li> <li><b>ADA</b> - xpub can be obtained from <a href=\"#operation/AdaGenerateWallet\">generate wallet</a></li> <li><b>ETH and ERC20</b> - xpub can be obtained from <a href=\"#operation/EthGenerateWallet\">generate wallet</a></li> <li><b>XRP</b> - xpub is the address field from <a href=\"#operation/XrpWallet\">generate account</a></li> <li><b>XLM</b> - xpub is the address field from <a href=\"#operation/XlmWallet\">generate account</a></li> <li><b>BNB</b> - xpub is the address field from <a href=\"#operation/BnbGenerateWallet\">generate account</a></li> <li><b>BSC</b> - xpub is the address field from <a href=\"#operation/BscGenerateWallet\">generate wallet</a></li> <li><b>EGLD</b> - no xpub, use mnemonic for the address field from <a href=\"#operation/EgldGenerateWallet\">generate wallet</a></li> <li><b>ALGO</b> - no xpub, use mnemonic for the address field from <a href=\"#operation/AlgoGenerateWallet\">generate wallet</a></li> <li><b>MATIC</b> - xpub is the address field from <a href=\"#operation/PolygonGenerateWallet\">generate wallet</a></li> <li><b>KCS</b> - xpub is the address field from <a href=\"#operation/KcsGenerateWallet\">generate wallet</a></li> <li><b>CELO, cEUR, cUSD and ERC20</b> - xpub is the address field from <a href=\"#operation/CeloGenerateWallet\">generate wallet</a></li> <li><b>TRON and TRC tokens</b> - xpub can be obtained from <a href=\"#operation/GenerateTronwallet\">generate wallet</a></li> <li><b>FLOW and FUSD</b> - xpub can be obtained from <a href=\"#operation/GenerateFlowwallet\">generate wallet</a></li> </ul> There are 2 options for connecting an account to a blockchain: <ul> <li>If xpub is present in the account, addresses are generated for the account via <a href=\"#operation/generateDepositAddress\">Create new deposit address</a>. This is the preferred mechanism.</li> <li>If xpub is not present in the account, addresses for this account are assigned manually via <a href=\"#operation/assignAddress\">Assign address</a>. This feature is used when there are already existing addresses to be used in Tatum.</li> </ul></p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_account(body, opts = {})
      data, _status_code, _headers = create_account_with_http_info(body, opts)
      data
    end

    # Create new account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Creates a new account for the customer. This will create an account on Tatum Private Ledger. It is possible to create an account for every supported cryptocurrency, FIAT, any ERC20 token created within a Tatum instance, and Tatum virtual currencies. When the customer field is already present, the account is added to the customer&#x27;s list of accounts. If the customer field is not present, a new customer is created along with the account.&lt;br/&gt; Every account has its own balance. Tatum supports 2 types of balances - accountBalance and availableBalance. The account balance represents all assets in the account, both available and blocked. The available balance in the account represents account balance minus the blocked amount in the account. The available balance should be used to determine how much a customer can send or withdraw from the account.&lt;br/&gt; An account is always created with a specific currency. Once the currency is set, it cannot be changed.&lt;br/&gt; When an account&#x27;s currency is blockchain-based, like BTC or ETH, the account is usually created with xpub. Xpub represents an extended public key of the blockchain wallet, which will be connected to this account. Adding xpub to the account does not connect any specific blockchain address to this account. Xpub is just a generator of addresses, not an address itself. Every blockchain has different types of xpubs: &lt;ul&gt; &lt;li&gt;&lt;b&gt;BTC&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/BtcGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;LTC&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/LtcGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;DOGE&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/DogeGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;BCH&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/BchGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;ADA&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/AdaGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;ETH and ERC20&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/EthGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;XRP&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/XrpWallet\&quot;&gt;generate account&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;XLM&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/XlmWallet\&quot;&gt;generate account&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;BNB&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/BnbGenerateWallet\&quot;&gt;generate account&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;BSC&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/BscGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;EGLD&lt;/b&gt; - no xpub, use mnemonic for the address field from &lt;a href&#x3D;\&quot;#operation/EgldGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;ALGO&lt;/b&gt; - no xpub, use mnemonic for the address field from &lt;a href&#x3D;\&quot;#operation/AlgoGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;MATIC&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/PolygonGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;KCS&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/KcsGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;CELO, cEUR, cUSD and ERC20&lt;/b&gt; - xpub is the address field from &lt;a href&#x3D;\&quot;#operation/CeloGenerateWallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;TRON and TRC tokens&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/GenerateTronwallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;FLOW and FUSD&lt;/b&gt; - xpub can be obtained from &lt;a href&#x3D;\&quot;#operation/GenerateFlowwallet\&quot;&gt;generate wallet&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; There are 2 options for connecting an account to a blockchain: &lt;ul&gt; &lt;li&gt;If xpub is present in the account, addresses are generated for the account via &lt;a href&#x3D;\&quot;#operation/generateDepositAddress\&quot;&gt;Create new deposit address&lt;/a&gt;. This is the preferred mechanism.&lt;/li&gt; &lt;li&gt;If xpub is not present in the account, addresses for this account are assigned manually via &lt;a href&#x3D;\&quot;#operation/assignAddress\&quot;&gt;Assign address&lt;/a&gt;. This feature is used when there are already existing addresses to be used in Tatum.&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def create_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.create_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerAccountApi.create_account"
      end
      # resource path
      local_var_path = '/v3/ledger/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Account' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create multiple accounts in a batch call
    # <h4>2 credits per API call + 1 credit for every account created.</h4><br/> <p>Creates new accounts for the customer in a batch call.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<Account>]
    def create_account_batch(body, opts = {})
      data, _status_code, _headers = create_account_batch_with_http_info(body, opts)
      data
    end

    # Create multiple accounts in a batch call
    # &lt;h4&gt;2 credits per API call + 1 credit for every account created.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Creates new accounts for the customer in a batch call.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Account>, Integer, Hash)>] Array<Account> data, response status code and response headers
    def create_account_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.create_account_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerAccountApi.create_account_batch"
      end
      # resource path
      local_var_path = '/v3/ledger/account/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Array<Account>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#create_account_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate account
    # <h4>2 credits per API call.</h4><br/><p>Deactivates an account. Only accounts with account and available balances of zero can be deactivated. Deactivated accounts are not visible in the list of accounts, it is not possible to send funds to these accounts or perform transactions. However, they are still present in the ledger and all transaction histories.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deactivate_account(id, opts = {})
      deactivate_account_with_http_info(id, opts)
      nil
    end

    # Deactivate account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Deactivates an account. Only accounts with account and available balances of zero can be deactivated. Deactivated accounts are not visible in the list of accounts, it is not possible to send funds to these accounts or perform transactions. However, they are still present in the ledger and all transaction histories.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deactivate_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.deactivate_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.deactivate_account"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}/deactivate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#deactivate_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unblock all blocked amounts in an account
    # <h4>1 credit per API call, 1 credit for each deleted blockage. 1 API call + 2 blockages  = 3 credits.</h4><br/><p>Unblocks previously blocked amounts in an account. Increases the available balance in the account where the amount was blocked.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_block_amount(id, opts = {})
      delete_all_block_amount_with_http_info(id, opts)
      nil
    end

    # Unblock all blocked amounts in an account
    # &lt;h4&gt;1 credit per API call, 1 credit for each deleted blockage. 1 API call + 2 blockages  &#x3D; 3 credits.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Unblocks previously blocked amounts in an account. Increases the available balance in the account where the amount was blocked.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_block_amount_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.delete_all_block_amount ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.delete_all_block_amount"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/account/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#delete_all_block_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unblock a blocked amount in an account
    # <h4>1 credit per API call.</h4><br/><p>Unblocks a previously blocked amount in an account. Increases the available balance in the account where the amount was blocked.</p>
    # @param id Blockage ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_block_amount(id, opts = {})
      delete_block_amount_with_http_info(id, opts)
      nil
    end

    # Unblock a blocked amount in an account
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Unblocks a previously blocked amount in an account. Increases the available balance in the account where the amount was blocked.&lt;/p&gt;
    # @param id Blockage ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_block_amount_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.delete_block_amount ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.delete_block_amount"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#delete_block_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Freeze account
    # <h4>2 credits per API call.</h4><br/><p>Disables all outgoing transactions. Incoming transactions to the account are available. When an account is frozen, its available balance is set to 0. This operation will create a new blockage of type ACCOUNT_FROZEN, which is automatically deleted when the account is unfrozen.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def freeze_account(id, opts = {})
      freeze_account_with_http_info(id, opts)
      nil
    end

    # Freeze account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Disables all outgoing transactions. Incoming transactions to the account are available. When an account is frozen, its available balance is set to 0. This operation will create a new blockage of type ACCOUNT_FROZEN, which is automatically deleted when the account is unfrozen.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def freeze_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.freeze_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.freeze_account"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}/freeze'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#freeze_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account balance
    # <h4>1 credit per API call.</h4><br/><p>Get balance for the account.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [AccountBalance]
    def get_account_balance(id, opts = {})
      data, _status_code, _headers = get_account_balance_with_http_info(id, opts)
      data
    end

    # Get account balance
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get balance for the account.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountBalance, Integer, Hash)>] AccountBalance data, response status code and response headers
    def get_account_balance_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_account_balance ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.get_account_balance"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}/balance'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AccountBalance' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account by ID
    # <h4>1 credit per API call.</h4><br/><p>Gets active account by ID. Displays all information regarding the given account.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_account_by_account_id(id, opts = {})
      data, _status_code, _headers = get_account_by_account_id_with_http_info(id, opts)
      data
    end

    # Get account by ID
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets active account by ID. Displays all information regarding the given account.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_account_by_account_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_account_by_account_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.get_account_by_account_id"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Account' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_account_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all customer accounts
    # <h4>1 credit per API call.</h4><br/><p>Lists all accounts associated with a customer. Only active accounts are visible.</p>
    # @param page_size Max number of items per page is 50.
    # @param id Internal customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [String] :account_code For bookkeeping to distinct account purpose.
    # @return [Array<Account>]
    def get_accounts_by_customer_id(page_size, id, opts = {})
      data, _status_code, _headers = get_accounts_by_customer_id_with_http_info(page_size, id, opts)
      data
    end

    # List all customer accounts
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Lists all accounts associated with a customer. Only active accounts are visible.&lt;/p&gt;
    # @param page_size Max number of items per page is 50.
    # @param id Internal customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [String] :account_code For bookkeeping to distinct account purpose.
    # @return [Array<(Array<Account>, Integer, Hash)>] Array<Account> data, response status code and response headers
    def get_accounts_by_customer_id_with_http_info(page_size, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_accounts_by_customer_id ...'
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling LedgerAccountApi.get_accounts_by_customer_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.get_accounts_by_customer_id"
      end
      # resource path
      local_var_path = '/v3/ledger/account/customer/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = page_size
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'accountCode'] = opts[:'account_code'] if !opts[:'account_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Account>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_accounts_by_customer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all accounts
    # <h4>1 credit per API call.</h4><br/><p>Lists all accounts. Inactive accounts are also visible.</p>
    # @param page_size Max number of items per page is 50.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [String] :account_code For bookkeeping to distinct account purpose.
    # @return [Array<Account>]
    def get_all_accounts(page_size, opts = {})
      data, _status_code, _headers = get_all_accounts_with_http_info(page_size, opts)
      data
    end

    # List all accounts
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Lists all accounts. Inactive accounts are also visible.&lt;/p&gt;
    # @param page_size Max number of items per page is 50.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [String] :account_code For bookkeeping to distinct account purpose.
    # @return [Array<(Array<Account>, Integer, Hash)>] Array<Account> data, response status code and response headers
    def get_all_accounts_with_http_info(page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_all_accounts ...'
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling LedgerAccountApi.get_all_accounts"
      end
      # resource path
      local_var_path = '/v3/ledger/account'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = page_size
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'accountCode'] = opts[:'account_code'] if !opts[:'account_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Account>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_all_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get blocked amounts in an account
    # <h4>1 credit per API call.</h4><br/><p>Gets blocked amounts for an account.</p>
    # @param id Account ID
    # @param page_size Max number of items per page is 50.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @return [Array<Blockage>]
    def get_block_amount(id, page_size, opts = {})
      data, _status_code, _headers = get_block_amount_with_http_info(id, page_size, opts)
      data
    end

    # Get blocked amounts in an account
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets blocked amounts for an account.&lt;/p&gt;
    # @param id Account ID
    # @param page_size Max number of items per page is 50.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @return [Array<(Array<Blockage>, Integer, Hash)>] Array<Blockage> data, response status code and response headers
    def get_block_amount_with_http_info(id, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_block_amount ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.get_block_amount"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling LedgerAccountApi.get_block_amount"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = page_size
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Blockage>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_block_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get blocked amount by ID
    # <h4>1 credit per API call.</h4><br/><p>Gets blocked amount by id.</p>
    # @param id Blocked amount ID
    # @param [Hash] opts the optional parameters
    # @return [Blockage]
    def get_block_amount_by_id(id, opts = {})
      data, _status_code, _headers = get_block_amount_by_id_with_http_info(id, opts)
      data
    end

    # Get blocked amount by ID
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets blocked amount by id.&lt;/p&gt;
    # @param id Blocked amount ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Blockage, Integer, Hash)>] Blockage data, response status code and response headers
    def get_block_amount_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.get_block_amount_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.get_block_amount_by_id"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/{id}/detail'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Blockage' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#get_block_amount_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unblock an amount in an account and perform a transaction
    # <h4>2 credits per API call.</h4><br/> <p>Unblocks a previously blocked amount in an account and invokes a ledger transaction from that account to a different recipient. If the request fails, the amount is not unblocked.</p> 
    # @param body 
    # @param id Blockage ID
    # @param [Hash] opts the optional parameters
    # @return [TransactionResult]
    def unblock_amount_with_transaction(body, id, opts = {})
      data, _status_code, _headers = unblock_amount_with_transaction_with_http_info(body, id, opts)
      data
    end

    # Unblock an amount in an account and perform a transaction
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Unblocks a previously blocked amount in an account and invokes a ledger transaction from that account to a different recipient. If the request fails, the amount is not unblocked.&lt;/p&gt; 
    # @param body 
    # @param id Blockage ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResult, Integer, Hash)>] TransactionResult data, response status code and response headers
    def unblock_amount_with_transaction_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.unblock_amount_with_transaction ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerAccountApi.unblock_amount_with_transaction"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.unblock_amount_with_transaction"
      end
      # resource path
      local_var_path = '/v3/ledger/account/block/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionResult' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#unblock_amount_with_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unfreeze account
    # <h4>2 credits per API call.</h4><br/><p>Unfreezes a previously frozen account. Unfreezing a non-frozen account not affect the account.</p>
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unfreeze_account(id, opts = {})
      unfreeze_account_with_http_info(id, opts)
      nil
    end

    # Unfreeze account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Unfreezes a previously frozen account. Unfreezing a non-frozen account not affect the account.&lt;/p&gt;
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unfreeze_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.unfreeze_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.unfreeze_account"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}/unfreeze'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#unfreeze_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update account
    # <h4>2 credits per API call.</h4><br/><p>Update account by ID. Only a small number of fields can be updated.</p>
    # @param body 
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_account_by_account_id(body, id, opts = {})
      update_account_by_account_id_with_http_info(body, id, opts)
      nil
    end

    # Update account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Update account by ID. Only a small number of fields can be updated.&lt;/p&gt;
    # @param body 
    # @param id Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_account_by_account_id_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerAccountApi.update_account_by_account_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerAccountApi.update_account_by_account_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerAccountApi.update_account_by_account_id"
      end
      # resource path
      local_var_path = '/v3/ledger/account/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerAccountApi#update_account_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
