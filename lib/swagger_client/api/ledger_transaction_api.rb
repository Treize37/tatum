=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module SwaggerClient
  class LedgerTransactionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Find transactions within the ledger.
    # <h4>1 credit per API call.</h4><br/><p>Find transactions across whole ledger.</p>
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [InlineResponse200]
    def get_transactions(body, opts = {})
      data, _status_code, _headers = get_transactions_with_http_info(body, opts)
      data
    end

    # Find transactions within the ledger.
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Find transactions across whole ledger.&lt;/p&gt;
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_transactions_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.get_transactions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerTransactionApi.get_transactions"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction/ledger'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#get_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find transactions for account.
    # <h4>1 credit per API call.</h4><br/><p>Finds transactions for the account identified by the given account ID.</p>
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [InlineResponse200]
    def get_transactions_by_account_id(body, opts = {})
      data, _status_code, _headers = get_transactions_by_account_id_with_http_info(body, opts)
      data
    end

    # Find transactions for account.
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for the account identified by the given account ID.&lt;/p&gt;
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_transactions_by_account_id_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.get_transactions_by_account_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerTransactionApi.get_transactions_by_account_id"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction/account'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#get_transactions_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find transactions for a customer across all of the customer's accounts.
    # <h4>1 credit per API call.</h4><br/><p>Finds transactions for all accounts of the customer identified by the given internal customer ID.</p>
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [InlineResponse200]
    def get_transactions_by_customer_id(body, opts = {})
      data, _status_code, _headers = get_transactions_by_customer_id_with_http_info(body, opts)
      data
    end

    # Find transactions for a customer across all of the customer&#x27;s accounts.
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for all accounts of the customer identified by the given internal customer ID.&lt;/p&gt;
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
    # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
    # @option opts [BOOLEAN] :count Get total transaction count based on the filter. Either count or pageSize is accepted.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_transactions_by_customer_id_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.get_transactions_by_customer_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerTransactionApi.get_transactions_by_customer_id"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction/customer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#get_transactions_by_customer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find transactions with a given reference across all accounts.
    # <h4>1 credit per API call.</h4><br/><p>Finds transactions for all accounts with the given reference.</p>
    # @param reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<Transaction>]
    def get_transactions_by_reference(reference, opts = {})
      data, _status_code, _headers = get_transactions_by_reference_with_http_info(reference, opts)
      data
    end

    # Find transactions with a given reference across all accounts.
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for all accounts with the given reference.&lt;/p&gt;
    # @param reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Transaction>, Integer, Hash)>] Array<Transaction> data, response status code and response headers
    def get_transactions_by_reference_with_http_info(reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.get_transactions_by_reference ...'
      end
      # verify the required parameter 'reference' is set
      if @api_client.config.client_side_validation && reference.nil?
        fail ArgumentError, "Missing the required parameter 'reference' when calling LedgerTransactionApi.get_transactions_by_reference"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction/reference/{reference}'.sub('{' + 'reference' + '}', reference.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Transaction>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#get_transactions_by_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send payment
    # <h4>4 credits per API call.</h4><br/> <p>Sends a payment within Tatum Private Ledger. All assets are settled instantly.<br/> When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.<br/> This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.<br/> If there is an insufficient balance in the sender account, no transaction is recorded.<br/> It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.<br/> The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionResult]
    def send_transaction(body, opts = {})
      data, _status_code, _headers = send_transaction_with_http_info(body, opts)
      data
    end

    # Send payment
    # &lt;h4&gt;4 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Sends a payment within Tatum Private Ledger. All assets are settled instantly.&lt;br/&gt; When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.&lt;br/&gt; This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.&lt;br/&gt; If there is an insufficient balance in the sender account, no transaction is recorded.&lt;br/&gt; It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.&lt;br/&gt; The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResult, Integer, Hash)>] TransactionResult data, response status code and response headers
    def send_transaction_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.send_transaction ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerTransactionApi.send_transaction"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionResult' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#send_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send payment in batch
    # <h4>2 + 2 * N per API call. (N - count of transactions)</h4><br/> <p>Sends the N payments within Tatum Private Ledger. All assets are settled instantly.<br/> When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.<br/> This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.<br/> If there is an insufficient balance in the sender account, no transaction is recorded.<br/> It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.<br/> The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [BatchTransactionResult]
    def send_transaction_batch(body, opts = {})
      data, _status_code, _headers = send_transaction_batch_with_http_info(body, opts)
      data
    end

    # Send payment in batch
    # &lt;h4&gt;2 + 2 * N per API call. (N - count of transactions)&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Sends the N payments within Tatum Private Ledger. All assets are settled instantly.&lt;br/&gt; When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.&lt;br/&gt; This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.&lt;br/&gt; If there is an insufficient balance in the sender account, no transaction is recorded.&lt;br/&gt; It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.&lt;br/&gt; The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchTransactionResult, Integer, Hash)>] BatchTransactionResult data, response status code and response headers
    def send_transaction_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerTransactionApi.send_transaction_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerTransactionApi.send_transaction_batch"
      end
      # resource path
      local_var_path = '/v3/ledger/transaction/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'BatchTransactionResult' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerTransactionApi#send_transaction_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
