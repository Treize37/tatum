=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module SwaggerClient
  class LedgerVirtualCurrencyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create new virtual currency
    # <h4>2 credits per API call.</h4><br/> <p>Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Every virtual currency must be prefixed with <b>VC_</b>.<br/> Every virtual currency must be pegged to existing FIAT or supported cryptocurrency. 1 unit of virtual currency has then the same amount as 1 unit of the base currency it is pegged to. It is possible to set a custom base rate for the virtual currency. (baseRate = 2 => 1 VC unit = 2 basePair units)<br/> Tatum virtual currency acts as any other asset within Tatum. For creation of ERC20 token, see <a href=\\\"#tatum-blockchain-api-erc20\\\">ERC20 </a>.<br/> This operation returns the newly created Tatum Ledger account with an initial balance set to the virtual currency's total supply. Total supply can be changed in the future.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_currency(body, opts = {})
      data, _status_code, _headers = create_currency_with_http_info(body, opts)
      data
    end

    # Create new virtual currency
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Every virtual currency must be prefixed with &lt;b&gt;VC_&lt;/b&gt;.&lt;br/&gt; Every virtual currency must be pegged to existing FIAT or supported cryptocurrency. 1 unit of virtual currency has then the same amount as 1 unit of the base currency it is pegged to. It is possible to set a custom base rate for the virtual currency. (baseRate &#x3D; 2 &#x3D;&gt; 1 VC unit &#x3D; 2 basePair units)&lt;br/&gt; Tatum virtual currency acts as any other asset within Tatum. For creation of ERC20 token, see &lt;a href&#x3D;\\\&quot;#tatum-blockchain-api-erc20\\\&quot;&gt;ERC20 &lt;/a&gt;.&lt;br/&gt; This operation returns the newly created Tatum Ledger account with an initial balance set to the virtual currency&#x27;s total supply. Total supply can be changed in the future.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def create_currency_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerVirtualCurrencyApi.create_currency ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerVirtualCurrencyApi.create_currency"
      end
      # resource path
      local_var_path = '/v3/ledger/virtualCurrency'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Account' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerVirtualCurrencyApi#create_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get virtual currency
    # <h4>1 credit per API call.</h4><br/><p>Get detail of virtual currency.<p>
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [VC]
    def get_currency(name, opts = {})
      data, _status_code, _headers = get_currency_with_http_info(name, opts)
      data
    end

    # Get virtual currency
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get detail of virtual currency.&lt;p&gt;
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VC, Integer, Hash)>] VC data, response status code and response headers
    def get_currency_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerVirtualCurrencyApi.get_currency ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling LedgerVirtualCurrencyApi.get_currency"
      end
      # resource path
      local_var_path = '/v3/ledger/virtualCurrency/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VC' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerVirtualCurrencyApi#get_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create new supply of virtual currency
    # <h4>2 credits per API call.</h4><br/> <p>Create new supply of virtual currency linked on the given accountId. Method increases the total supply of the currency.<br/> This method creates Ledger transaction with operationType MINT with undefined counterAccountId.<p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionResult]
    def mint_currency(body, opts = {})
      data, _status_code, _headers = mint_currency_with_http_info(body, opts)
      data
    end

    # Create new supply of virtual currency
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Create new supply of virtual currency linked on the given accountId. Method increases the total supply of the currency.&lt;br/&gt; This method creates Ledger transaction with operationType MINT with undefined counterAccountId.&lt;p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResult, Integer, Hash)>] TransactionResult data, response status code and response headers
    def mint_currency_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerVirtualCurrencyApi.mint_currency ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerVirtualCurrencyApi.mint_currency"
      end
      # resource path
      local_var_path = '/v3/ledger/virtualCurrency/mint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionResult' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerVirtualCurrencyApi#mint_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Destroy supply of virtual currency
    # <h4>2 credits per API call.</h4><br/> <p>Destroy supply of virtual currency linked on the given accountId. Method decreases the total supply of the currency.<br/> This method creates Ledger transaction with operationType REVOKE with undefined counterAccountId.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionResult]
    def revoke_currency(body, opts = {})
      data, _status_code, _headers = revoke_currency_with_http_info(body, opts)
      data
    end

    # Destroy supply of virtual currency
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Destroy supply of virtual currency linked on the given accountId. Method decreases the total supply of the currency.&lt;br/&gt; This method creates Ledger transaction with operationType REVOKE with undefined counterAccountId.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResult, Integer, Hash)>] TransactionResult data, response status code and response headers
    def revoke_currency_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerVirtualCurrencyApi.revoke_currency ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerVirtualCurrencyApi.revoke_currency"
      end
      # resource path
      local_var_path = '/v3/ledger/virtualCurrency/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionResult' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerVirtualCurrencyApi#revoke_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update virtual currency
    # <h4>2 credits per API call.</h4><br/><p>Change base pair and/or base rate of existing virtual currency.</p>
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_currency(body, opts = {})
      update_currency_with_http_info(body, opts)
      nil
    end

    # Update virtual currency
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Change base pair and/or base rate of existing virtual currency.&lt;/p&gt;
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_currency_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerVirtualCurrencyApi.update_currency ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LedgerVirtualCurrencyApi.update_currency"
      end
      # resource path
      local_var_path = '/v3/ledger/virtualCurrency'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerVirtualCurrencyApi#update_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
