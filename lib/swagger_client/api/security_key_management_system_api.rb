=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module SwaggerClient
  class SecurityKeyManagementSystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Complete pending transaction to sign
    # <h4>2 credits per API call.</h4><br/> <p>Mark pending transaction to sign as a complete and update it with a transactionID from the blockchain.</p> 
    # @param id ID of pending transaction
    # @param tx_id transaction ID of blockchain transaction
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def complete_pending_signature(id, tx_id, opts = {})
      complete_pending_signature_with_http_info(id, tx_id, opts)
      nil
    end

    # Complete pending transaction to sign
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Mark pending transaction to sign as a complete and update it with a transactionID from the blockchain.&lt;/p&gt; 
    # @param id ID of pending transaction
    # @param tx_id transaction ID of blockchain transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def complete_pending_signature_with_http_info(id, tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityKeyManagementSystemApi.complete_pending_signature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityKeyManagementSystemApi.complete_pending_signature"
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling SecurityKeyManagementSystemApi.complete_pending_signature"
      end
      # resource path
      local_var_path = '/v3/kms/{id}/{txId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'txId' + '}', tx_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityKeyManagementSystemApi#complete_pending_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete transaction
    # <h4>2 credits per API call.</h4><br/><p>Delete transaction to be signed. When deleting offchain transaction, linked withdrawal will be cancelled automatically.</p>
    # @param id ID of transaction
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :revert Defines whether fee should be reverted to account balance as well as amount. Defaults to true. Revert true would be typically used when withdrawal was not broadcast to blockchain. False is used usually for Ethereum ERC20 based currencies. (default to true)
    # @return [nil]
    def delete_pending_transaction_to_sign(id, opts = {})
      delete_pending_transaction_to_sign_with_http_info(id, opts)
      nil
    end

    # Delete transaction
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Delete transaction to be signed. When deleting offchain transaction, linked withdrawal will be cancelled automatically.&lt;/p&gt;
    # @param id ID of transaction
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :revert Defines whether fee should be reverted to account balance as well as amount. Defaults to true. Revert true would be typically used when withdrawal was not broadcast to blockchain. False is used usually for Ethereum ERC20 based currencies.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pending_transaction_to_sign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityKeyManagementSystemApi.delete_pending_transaction_to_sign ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityKeyManagementSystemApi.delete_pending_transaction_to_sign"
      end
      # resource path
      local_var_path = '/v3/kms/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'revert'] = opts[:'revert'] if !opts[:'revert'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityKeyManagementSystemApi#delete_pending_transaction_to_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get transaction details
    # <h4>1 credit per API call.</h4><br/><p>Get detail of transaction to be signed / that was already signed and contains transactionId.</p>
    # @param id ID of transaction
    # @param [Hash] opts the optional parameters
    # @return [PendingTransaction]
    def get_pending_transaction_to_sign(id, opts = {})
      data, _status_code, _headers = get_pending_transaction_to_sign_with_http_info(id, opts)
      data
    end

    # Get transaction details
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get detail of transaction to be signed / that was already signed and contains transactionId.&lt;/p&gt;
    # @param id ID of transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(PendingTransaction, Integer, Hash)>] PendingTransaction data, response status code and response headers
    def get_pending_transaction_to_sign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityKeyManagementSystemApi.get_pending_transaction_to_sign ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityKeyManagementSystemApi.get_pending_transaction_to_sign"
      end
      # resource path
      local_var_path = '/v3/kms/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PendingTransaction' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityKeyManagementSystemApi#get_pending_transaction_to_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get pending transactions to sign
    # <h4>1 credit per API call.</h4><br/><p>Get list of pending transaction to be signed and broadcast using Tatum KMS.</p>
    # @param chain Blockchain to get pending transactions for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :signatures Signature IDs of the KMS which invokes this endpoint. If multiple, they should be separated by comma.
    # @return [PendingTransaction]
    def get_pending_transactions_to_sign(chain, opts = {})
      data, _status_code, _headers = get_pending_transactions_to_sign_with_http_info(chain, opts)
      data
    end

    # Get pending transactions to sign
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get list of pending transaction to be signed and broadcast using Tatum KMS.&lt;/p&gt;
    # @param chain Blockchain to get pending transactions for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :signatures Signature IDs of the KMS which invokes this endpoint. If multiple, they should be separated by comma.
    # @return [Array<(PendingTransaction, Integer, Hash)>] PendingTransaction data, response status code and response headers
    def get_pending_transactions_to_sign_with_http_info(chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityKeyManagementSystemApi.get_pending_transactions_to_sign ...'
      end
      # verify the required parameter 'chain' is set
      if @api_client.config.client_side_validation && chain.nil?
        fail ArgumentError, "Missing the required parameter 'chain' when calling SecurityKeyManagementSystemApi.get_pending_transactions_to_sign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['BNB', 'BTC', 'ETH', 'XLM', 'XRP', 'BCH', 'LTC', 'DOGE', 'VET', 'BSC', 'ADA', 'MATIC', 'CELO', 'FLOW', 'TRON', 'ONE', 'XDC', 'EGLD'].include?(chain)
        fail ArgumentError, "invalid value for 'chain', must be one of BNB, BTC, ETH, XLM, XRP, BCH, LTC, DOGE, VET, BSC, ADA, MATIC, CELO, FLOW, TRON, ONE, XDC, EGLD"
      end
      # resource path
      local_var_path = '/v3/kms/pending/{chain}'.sub('{' + 'chain' + '}', chain.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'signatures'] = opts[:'signatures'] if !opts[:'signatures'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PendingTransaction' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityKeyManagementSystemApi#get_pending_transactions_to_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
