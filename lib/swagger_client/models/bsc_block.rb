=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class BscBlock
    # Difficulty for this block.
    attr_accessor :difficulty

    # The 'extra data' field of this block.
    attr_accessor :extra_data

    # The maximum gas allowed in this block.
    attr_accessor :gas_limit

    # The total used gas by all transactions in this block.
    attr_accessor :gas_used

    # Hash of the block. 'null' when its pending block.
    attr_accessor :hash

    # The bloom filter for the logs of the block. 'null' when its pending block.
    attr_accessor :logs_bloom

    # The address of the beneficiary to whom the mining rewards were given.
    attr_accessor :miner

    attr_accessor :mix_hash

    # Hash of the generated proof-of-work. 'null' when its pending block.
    attr_accessor :nonce

    # The block number. 'null' when its pending block.
    attr_accessor :number

    # Hash of the parent block.
    attr_accessor :parent_hash

    attr_accessor :receipts_root

    # SHA3 of the uncles data in the block.
    attr_accessor :sha3_uncles

    # The size of this block in bytes.
    attr_accessor :size

    # The root of the final state trie of the block.
    attr_accessor :state_root

    # The unix timestamp for when the block was collated.
    attr_accessor :timestamp

    # Total difficulty of the chain until this block.
    attr_accessor :total_difficulty

    # Array of transactions.
    attr_accessor :transactions

    # The root of the transaction trie of the block.
    attr_accessor :transactions_root

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'difficulty' => :'difficulty',
        :'extra_data' => :'extraData',
        :'gas_limit' => :'gasLimit',
        :'gas_used' => :'gasUsed',
        :'hash' => :'hash',
        :'logs_bloom' => :'logsBloom',
        :'miner' => :'miner',
        :'mix_hash' => :'mixHash',
        :'nonce' => :'nonce',
        :'number' => :'number',
        :'parent_hash' => :'parentHash',
        :'receipts_root' => :'receiptsRoot',
        :'sha3_uncles' => :'sha3Uncles',
        :'size' => :'size',
        :'state_root' => :'stateRoot',
        :'timestamp' => :'timestamp',
        :'total_difficulty' => :'totalDifficulty',
        :'transactions' => :'transactions',
        :'transactions_root' => :'transactionsRoot'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'difficulty' => :'Object',
        :'extra_data' => :'Object',
        :'gas_limit' => :'Object',
        :'gas_used' => :'Object',
        :'hash' => :'Object',
        :'logs_bloom' => :'Object',
        :'miner' => :'Object',
        :'mix_hash' => :'Object',
        :'nonce' => :'Object',
        :'number' => :'Object',
        :'parent_hash' => :'Object',
        :'receipts_root' => :'Object',
        :'sha3_uncles' => :'Object',
        :'size' => :'Object',
        :'state_root' => :'Object',
        :'timestamp' => :'Object',
        :'total_difficulty' => :'Object',
        :'transactions' => :'Object',
        :'transactions_root' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::BscBlock` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::BscBlock`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'difficulty')
        self.difficulty = attributes[:'difficulty']
      end

      if attributes.key?(:'extra_data')
        self.extra_data = attributes[:'extra_data']
      end

      if attributes.key?(:'gas_limit')
        self.gas_limit = attributes[:'gas_limit']
      end

      if attributes.key?(:'gas_used')
        self.gas_used = attributes[:'gas_used']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'logs_bloom')
        self.logs_bloom = attributes[:'logs_bloom']
      end

      if attributes.key?(:'miner')
        self.miner = attributes[:'miner']
      end

      if attributes.key?(:'mix_hash')
        self.mix_hash = attributes[:'mix_hash']
      end

      if attributes.key?(:'nonce')
        self.nonce = attributes[:'nonce']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'parent_hash')
        self.parent_hash = attributes[:'parent_hash']
      end

      if attributes.key?(:'receipts_root')
        self.receipts_root = attributes[:'receipts_root']
      end

      if attributes.key?(:'sha3_uncles')
        self.sha3_uncles = attributes[:'sha3_uncles']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'state_root')
        self.state_root = attributes[:'state_root']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'total_difficulty')
        self.total_difficulty = attributes[:'total_difficulty']
      end

      if attributes.key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      end

      if attributes.key?(:'transactions_root')
        self.transactions_root = attributes[:'transactions_root']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          difficulty == o.difficulty &&
          extra_data == o.extra_data &&
          gas_limit == o.gas_limit &&
          gas_used == o.gas_used &&
          hash == o.hash &&
          logs_bloom == o.logs_bloom &&
          miner == o.miner &&
          mix_hash == o.mix_hash &&
          nonce == o.nonce &&
          number == o.number &&
          parent_hash == o.parent_hash &&
          receipts_root == o.receipts_root &&
          sha3_uncles == o.sha3_uncles &&
          size == o.size &&
          state_root == o.state_root &&
          timestamp == o.timestamp &&
          total_difficulty == o.total_difficulty &&
          transactions == o.transactions &&
          transactions_root == o.transactions_root
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [difficulty, extra_data, gas_limit, gas_used, hash, logs_bloom, miner, mix_hash, nonce, number, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions, transactions_root].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
