=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class EgldTx
    # Type of transaction.
    attr_accessor :type

    # Nonce of the transaction.
    attr_accessor :nonce

    # The round number.
    attr_accessor :round

    # An epoch is a sequence of consecutive rounds during which the configuration of the network does not change (currently aprox. 24 hrs in length).
    attr_accessor :epoch

    # Transferred value.
    attr_accessor :value

    # Address of the receiver.
    attr_accessor :receiver

    # Address of the sender.
    attr_accessor :sender

    # Gas price provided by the sender
    attr_accessor :gas_price

    # Gas provided by the sender
    attr_accessor :gas_limit

    # Data field in transaction.
    attr_accessor :data

    # Signature of the transaction.
    attr_accessor :signature

    # Source shard.
    attr_accessor :source_shard

    # Destination shard.
    attr_accessor :destination_shard

    # Nonce of block which contains current transaction.
    attr_accessor :block_nonce

    # Hash of block which contains current transaction.
    attr_accessor :block_hash

    # Miniblock hash.
    attr_accessor :miniblock_hash

    # The unix timestamp for when the block was collated.
    attr_accessor :timestamp

    # Status of the transaction.
    attr_accessor :status

    # Nonce of the hyperblockwhere this transaction was in.
    attr_accessor :hyperblock_nonce

    # Hash of the hyperblock where this transaction was in.
    attr_accessor :hyperblock_hash

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'nonce' => :'nonce',
        :'round' => :'round',
        :'epoch' => :'epoch',
        :'value' => :'value',
        :'receiver' => :'receiver',
        :'sender' => :'sender',
        :'gas_price' => :'gasPrice',
        :'gas_limit' => :'gasLimit',
        :'data' => :'data',
        :'signature' => :'signature',
        :'source_shard' => :'sourceShard',
        :'destination_shard' => :'destinationShard',
        :'block_nonce' => :'blockNonce',
        :'block_hash' => :'blockHash',
        :'miniblock_hash' => :'miniblockHash',
        :'timestamp' => :'timestamp',
        :'status' => :'status',
        :'hyperblock_nonce' => :'hyperblockNonce',
        :'hyperblock_hash' => :'hyperblockHash'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'Object',
        :'nonce' => :'Object',
        :'round' => :'Object',
        :'epoch' => :'Object',
        :'value' => :'Object',
        :'receiver' => :'Object',
        :'sender' => :'Object',
        :'gas_price' => :'Object',
        :'gas_limit' => :'Object',
        :'data' => :'Object',
        :'signature' => :'Object',
        :'source_shard' => :'Object',
        :'destination_shard' => :'Object',
        :'block_nonce' => :'Object',
        :'block_hash' => :'Object',
        :'miniblock_hash' => :'Object',
        :'timestamp' => :'Object',
        :'status' => :'Object',
        :'hyperblock_nonce' => :'Object',
        :'hyperblock_hash' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::EgldTx` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::EgldTx`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'nonce')
        self.nonce = attributes[:'nonce']
      end

      if attributes.key?(:'round')
        self.round = attributes[:'round']
      end

      if attributes.key?(:'epoch')
        self.epoch = attributes[:'epoch']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'receiver')
        self.receiver = attributes[:'receiver']
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'gas_price')
        self.gas_price = attributes[:'gas_price']
      end

      if attributes.key?(:'gas_limit')
        self.gas_limit = attributes[:'gas_limit']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.key?(:'source_shard')
        self.source_shard = attributes[:'source_shard']
      end

      if attributes.key?(:'destination_shard')
        self.destination_shard = attributes[:'destination_shard']
      end

      if attributes.key?(:'block_nonce')
        self.block_nonce = attributes[:'block_nonce']
      end

      if attributes.key?(:'block_hash')
        self.block_hash = attributes[:'block_hash']
      end

      if attributes.key?(:'miniblock_hash')
        self.miniblock_hash = attributes[:'miniblock_hash']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'hyperblock_nonce')
        self.hyperblock_nonce = attributes[:'hyperblock_nonce']
      end

      if attributes.key?(:'hyperblock_hash')
        self.hyperblock_hash = attributes[:'hyperblock_hash']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          nonce == o.nonce &&
          round == o.round &&
          epoch == o.epoch &&
          value == o.value &&
          receiver == o.receiver &&
          sender == o.sender &&
          gas_price == o.gas_price &&
          gas_limit == o.gas_limit &&
          data == o.data &&
          signature == o.signature &&
          source_shard == o.source_shard &&
          destination_shard == o.destination_shard &&
          block_nonce == o.block_nonce &&
          block_hash == o.block_hash &&
          miniblock_hash == o.miniblock_hash &&
          timestamp == o.timestamp &&
          status == o.status &&
          hyperblock_nonce == o.hyperblock_nonce &&
          hyperblock_hash == o.hyperblock_hash
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, nonce, round, epoch, value, receiver, sender, gas_price, gas_limit, data, signature, source_shard, destination_shard, block_nonce, block_hash, miniblock_hash, timestamp, status, hyperblock_nonce, hyperblock_hash].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
