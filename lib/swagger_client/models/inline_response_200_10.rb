=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class InlineResponse20010
    # Amount of NFTs to sold in this auction. Valid only for ERC1155 listings.
    attr_accessor :amount

    # Address of the highest buyer, if exists.
    attr_accessor :bidder

    # Address of the ERC20 token smart contract, which should be used for paying for the asset..
    attr_accessor :erc20_address

    # If the listing is for ERC721 or ERC1155 token.
    attr_accessor :is_erc721

    # Block height this auction started at.
    attr_accessor :started_at

    # Block height this auction ended at.
    attr_accessor :ended_at

    # Address of the NFT smart contract.
    attr_accessor :nft_address

    # Final auction price of the NFT asset in native currency or ERC20 token based on the presence of erc20Address field.
    attr_accessor :ending_price

    # Address of the seller.
    attr_accessor :seller

    # Current highest bid of the NFT asset in native currency or ERC20 token based on the presence of erc20Address field.
    attr_accessor :highest_bid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'bidder' => :'bidder',
        :'erc20_address' => :'erc20Address',
        :'is_erc721' => :'isErc721',
        :'started_at' => :'startedAt',
        :'ended_at' => :'endedAt',
        :'nft_address' => :'nftAddress',
        :'ending_price' => :'endingPrice',
        :'seller' => :'seller',
        :'highest_bid' => :'highestBid'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Object',
        :'bidder' => :'Object',
        :'erc20_address' => :'Object',
        :'is_erc721' => :'Object',
        :'started_at' => :'Object',
        :'ended_at' => :'Object',
        :'nft_address' => :'Object',
        :'ending_price' => :'Object',
        :'seller' => :'Object',
        :'highest_bid' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse20010` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse20010`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'bidder')
        self.bidder = attributes[:'bidder']
      end

      if attributes.key?(:'erc20_address')
        self.erc20_address = attributes[:'erc20_address']
      end

      if attributes.key?(:'is_erc721')
        self.is_erc721 = attributes[:'is_erc721']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'ended_at')
        self.ended_at = attributes[:'ended_at']
      end

      if attributes.key?(:'nft_address')
        self.nft_address = attributes[:'nft_address']
      end

      if attributes.key?(:'ending_price')
        self.ending_price = attributes[:'ending_price']
      end

      if attributes.key?(:'seller')
        self.seller = attributes[:'seller']
      end

      if attributes.key?(:'highest_bid')
        self.highest_bid = attributes[:'highest_bid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          bidder == o.bidder &&
          erc20_address == o.erc20_address &&
          is_erc721 == o.is_erc721 &&
          started_at == o.started_at &&
          ended_at == o.ended_at &&
          nft_address == o.nft_address &&
          ending_price == o.ending_price &&
          seller == o.seller &&
          highest_bid == o.highest_bid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, bidder, erc20_address, is_erc721, started_at, ended_at, nft_address, ending_price, seller, highest_bid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
