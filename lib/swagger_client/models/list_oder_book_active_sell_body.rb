=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class ListOderBookActiveSellBody
    # Account ID. If present, list current active sell trades for that account.
    attr_accessor :id

    # Customer ID. If present, list current active buy trades for that customer.
    attr_accessor :customer_id

    # Max number of items per page is 50.
    attr_accessor :page_size

    # Offset to obtain next page of the data.
    attr_accessor :offset

    # Trade pair. If present, list current active sell trades for that pair.
    attr_accessor :pair

    # Get the total trade pair count based on the filter. Either count or pageSize is accepted.
    attr_accessor :count

    # Trade type.
    attr_accessor :trade_type

    # Amount of the trade. AND is used between filter options.
    attr_accessor :amount

    # Fill of the trade. AND is used between filter options.
    attr_accessor :fill

    # Price of the trade. AND is used between filter options.
    attr_accessor :price

    # Created date of the trade. AND is used between filter options.
    attr_accessor :created

    attr_accessor :sort

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'customer_id' => :'customerId',
        :'page_size' => :'pageSize',
        :'offset' => :'offset',
        :'pair' => :'pair',
        :'count' => :'count',
        :'trade_type' => :'tradeType',
        :'amount' => :'amount',
        :'fill' => :'fill',
        :'price' => :'price',
        :'created' => :'created',
        :'sort' => :'sort'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'customer_id' => :'Object',
        :'page_size' => :'Object',
        :'offset' => :'Object',
        :'pair' => :'Object',
        :'count' => :'Object',
        :'trade_type' => :'Object',
        :'amount' => :'Object',
        :'fill' => :'Object',
        :'price' => :'Object',
        :'created' => :'Object',
        :'sort' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ListOderBookActiveSellBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ListOderBookActiveSellBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'pair')
        self.pair = attributes[:'pair']
      end

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.key?(:'trade_type')
        self.trade_type = attributes[:'trade_type']
      end

      if attributes.key?(:'amount')
        if (value = attributes[:'amount']).is_a?(Array)
          self.amount = value
        end
      end

      if attributes.key?(:'fill')
        if (value = attributes[:'fill']).is_a?(Array)
          self.fill = value
        end
      end

      if attributes.key?(:'price')
        if (value = attributes[:'price']).is_a?(Array)
          self.price = value
        end
      end

      if attributes.key?(:'created')
        if (value = attributes[:'created']).is_a?(Array)
          self.created = value
        end
      end

      if attributes.key?(:'sort')
        self.sort = attributes[:'sort']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @page_size.nil?
        invalid_properties.push('invalid value for "page_size", page_size cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @page_size.nil?
      trade_type_validator = EnumAttributeValidator.new('Object', ['FUTURE_SELL', 'SELL'])
      return false unless trade_type_validator.valid?(@trade_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trade_type Object to be assigned
    def trade_type=(trade_type)
      validator = EnumAttributeValidator.new('Object', ['FUTURE_SELL', 'SELL'])
      unless validator.valid?(trade_type)
        fail ArgumentError, "invalid value for \"trade_type\", must be one of #{validator.allowable_values}."
      end
      @trade_type = trade_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          customer_id == o.customer_id &&
          page_size == o.page_size &&
          offset == o.offset &&
          pair == o.pair &&
          count == o.count &&
          trade_type == o.trade_type &&
          amount == o.amount &&
          fill == o.fill &&
          price == o.price &&
          created == o.created &&
          sort == o.sort
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, customer_id, page_size, offset, pair, count, trade_type, amount, fill, price, created, sort].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
