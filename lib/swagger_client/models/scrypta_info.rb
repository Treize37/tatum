=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class ScryptaInfo
    attr_accessor :version

    attr_accessor :protocolversion

    attr_accessor :walletversion

    attr_accessor :balance

    attr_accessor :obfuscation_balance

    attr_accessor :blocks

    attr_accessor :timeoffset

    attr_accessor :connections

    attr_accessor :proxy

    attr_accessor :difficulty

    attr_accessor :testnet

    attr_accessor :keypoololdest

    attr_accessor :keypoolsize

    attr_accessor :paytxfee

    attr_accessor :relayfee

    attr_accessor :staking_status

    attr_accessor :errors

    attr_accessor :indexed

    attr_accessor :toindex

    attr_accessor :checksum

    attr_accessor :node

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'version' => :'version',
        :'protocolversion' => :'protocolversion',
        :'walletversion' => :'walletversion',
        :'balance' => :'balance',
        :'obfuscation_balance' => :'obfuscation_balance',
        :'blocks' => :'blocks',
        :'timeoffset' => :'timeoffset',
        :'connections' => :'connections',
        :'proxy' => :'proxy',
        :'difficulty' => :'difficulty',
        :'testnet' => :'testnet',
        :'keypoololdest' => :'keypoololdest',
        :'keypoolsize' => :'keypoolsize',
        :'paytxfee' => :'paytxfee',
        :'relayfee' => :'relayfee',
        :'staking_status' => :'staking status',
        :'errors' => :'errors',
        :'indexed' => :'indexed',
        :'toindex' => :'toindex',
        :'checksum' => :'checksum',
        :'node' => :'node'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'version' => :'Object',
        :'protocolversion' => :'Object',
        :'walletversion' => :'Object',
        :'balance' => :'Object',
        :'obfuscation_balance' => :'Object',
        :'blocks' => :'Object',
        :'timeoffset' => :'Object',
        :'connections' => :'Object',
        :'proxy' => :'Object',
        :'difficulty' => :'Object',
        :'testnet' => :'Object',
        :'keypoololdest' => :'Object',
        :'keypoolsize' => :'Object',
        :'paytxfee' => :'Object',
        :'relayfee' => :'Object',
        :'staking_status' => :'Object',
        :'errors' => :'Object',
        :'indexed' => :'Object',
        :'toindex' => :'Object',
        :'checksum' => :'Object',
        :'node' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ScryptaInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ScryptaInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'protocolversion')
        self.protocolversion = attributes[:'protocolversion']
      end

      if attributes.key?(:'walletversion')
        self.walletversion = attributes[:'walletversion']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'obfuscation_balance')
        self.obfuscation_balance = attributes[:'obfuscation_balance']
      end

      if attributes.key?(:'blocks')
        self.blocks = attributes[:'blocks']
      end

      if attributes.key?(:'timeoffset')
        self.timeoffset = attributes[:'timeoffset']
      end

      if attributes.key?(:'connections')
        self.connections = attributes[:'connections']
      end

      if attributes.key?(:'proxy')
        self.proxy = attributes[:'proxy']
      end

      if attributes.key?(:'difficulty')
        self.difficulty = attributes[:'difficulty']
      end

      if attributes.key?(:'testnet')
        self.testnet = attributes[:'testnet']
      end

      if attributes.key?(:'keypoololdest')
        self.keypoololdest = attributes[:'keypoololdest']
      end

      if attributes.key?(:'keypoolsize')
        self.keypoolsize = attributes[:'keypoolsize']
      end

      if attributes.key?(:'paytxfee')
        self.paytxfee = attributes[:'paytxfee']
      end

      if attributes.key?(:'relayfee')
        self.relayfee = attributes[:'relayfee']
      end

      if attributes.key?(:'staking_status')
        self.staking_status = attributes[:'staking_status']
      end

      if attributes.key?(:'errors')
        self.errors = attributes[:'errors']
      end

      if attributes.key?(:'indexed')
        self.indexed = attributes[:'indexed']
      end

      if attributes.key?(:'toindex')
        self.toindex = attributes[:'toindex']
      end

      if attributes.key?(:'checksum')
        self.checksum = attributes[:'checksum']
      end

      if attributes.key?(:'node')
        self.node = attributes[:'node']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          version == o.version &&
          protocolversion == o.protocolversion &&
          walletversion == o.walletversion &&
          balance == o.balance &&
          obfuscation_balance == o.obfuscation_balance &&
          blocks == o.blocks &&
          timeoffset == o.timeoffset &&
          connections == o.connections &&
          proxy == o.proxy &&
          difficulty == o.difficulty &&
          testnet == o.testnet &&
          keypoololdest == o.keypoololdest &&
          keypoolsize == o.keypoolsize &&
          paytxfee == o.paytxfee &&
          relayfee == o.relayfee &&
          staking_status == o.staking_status &&
          errors == o.errors &&
          indexed == o.indexed &&
          toindex == o.toindex &&
          checksum == o.checksum &&
          node == o.node
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [version, protocolversion, walletversion, balance, obfuscation_balance, blocks, timeoffset, connections, proxy, difficulty, testnet, keypoololdest, keypoolsize, paytxfee, relayfee, staking_status, errors, indexed, toindex, checksum, node].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
