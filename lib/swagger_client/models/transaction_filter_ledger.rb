=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module SwaggerClient
  class TransactionFilterLedger
    # Source account - source of transaction(s).
    attr_accessor :account

    # Counter account - transaction(s) destination account.
    attr_accessor :counter_account

    # Currency of the transactions.
    attr_accessor :currency

    # Starting date to search for transactions from in UTC millis. If not present, search all history.
    attr_accessor :from

    # Amount of the transaction. AND is used between filter options.
    attr_accessor :amount

    # List of currencies of the transactions.
    attr_accessor :currencies

    # Type of payment
    attr_accessor :transaction_type

    # Types of payment
    attr_accessor :transaction_types

    # Type of operation.
    attr_accessor :op_type

    # For bookkeeping to distinct transaction purpose.
    attr_accessor :transaction_code

    # Payment ID defined in payment order by sender.
    attr_accessor :payment_id

    # Recipient note defined in payment order by sender.
    attr_accessor :recipient_note

    # Sender note defined in payment order by sender.
    attr_accessor :sender_note

    # Date until to search for transactions in UTC millis. If not present, search up till now.
    attr_accessor :to

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account' => :'account',
        :'counter_account' => :'counterAccount',
        :'currency' => :'currency',
        :'from' => :'from',
        :'amount' => :'amount',
        :'currencies' => :'currencies',
        :'transaction_type' => :'transactionType',
        :'transaction_types' => :'transactionTypes',
        :'op_type' => :'opType',
        :'transaction_code' => :'transactionCode',
        :'payment_id' => :'paymentId',
        :'recipient_note' => :'recipientNote',
        :'sender_note' => :'senderNote',
        :'to' => :'to'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account' => :'Object',
        :'counter_account' => :'Object',
        :'currency' => :'Object',
        :'from' => :'Object',
        :'amount' => :'Object',
        :'currencies' => :'Object',
        :'transaction_type' => :'Object',
        :'transaction_types' => :'Object',
        :'op_type' => :'Object',
        :'transaction_code' => :'Object',
        :'payment_id' => :'Object',
        :'recipient_note' => :'Object',
        :'sender_note' => :'Object',
        :'to' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::TransactionFilterLedger` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::TransactionFilterLedger`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.key?(:'counter_account')
        self.counter_account = attributes[:'counter_account']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'amount')
        if (value = attributes[:'amount']).is_a?(Array)
          self.amount = value
        end
      end

      if attributes.key?(:'currencies')
        if (value = attributes[:'currencies']).is_a?(Array)
          self.currencies = value
        end
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'transaction_types')
        if (value = attributes[:'transaction_types']).is_a?(Array)
          self.transaction_types = value
        end
      end

      if attributes.key?(:'op_type')
        self.op_type = attributes[:'op_type']
      end

      if attributes.key?(:'transaction_code')
        self.transaction_code = attributes[:'transaction_code']
      end

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'recipient_note')
        self.recipient_note = attributes[:'recipient_note']
      end

      if attributes.key?(:'sender_note')
        self.sender_note = attributes[:'sender_note']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      op_type_validator = EnumAttributeValidator.new('Object', ['PAYMENT', 'WITHDRAWAL', 'BLOCKCHAIN_TRANSACTION', 'EXCHANGE', 'FAILED', 'DEPOSIT', 'MINT', 'REVOKE'])
      return false unless op_type_validator.valid?(@op_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] op_type Object to be assigned
    def op_type=(op_type)
      validator = EnumAttributeValidator.new('Object', ['PAYMENT', 'WITHDRAWAL', 'BLOCKCHAIN_TRANSACTION', 'EXCHANGE', 'FAILED', 'DEPOSIT', 'MINT', 'REVOKE'])
      unless validator.valid?(op_type)
        fail ArgumentError, "invalid value for \"op_type\", must be one of #{validator.allowable_values}."
      end
      @op_type = op_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account == o.account &&
          counter_account == o.counter_account &&
          currency == o.currency &&
          from == o.from &&
          amount == o.amount &&
          currencies == o.currencies &&
          transaction_type == o.transaction_type &&
          transaction_types == o.transaction_types &&
          op_type == o.op_type &&
          transaction_code == o.transaction_code &&
          payment_id == o.payment_id &&
          recipient_note == o.recipient_note &&
          sender_note == o.sender_note &&
          to == o.to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account, counter_account, currency, from, amount, currencies, transaction_type, transaction_types, op_type, transaction_code, payment_id, recipient_note, sender_note, to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
