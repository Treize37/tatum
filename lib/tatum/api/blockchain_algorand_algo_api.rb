=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Tatum
  class BlockchainAlgorandALGOApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Access Algorand Algod GET node endpoints
    # <h4>1 credit per API call.</h4><br/> <p>Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - <a href=\"https://developer.algorand.org/docs/rest-apis/algod/v2/\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/algod/v2/</a>. <br/> Example call for Get Block is described in the response. <a href=\"https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround</a>. <br/> URL used for this call would be <pre>https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/blocks/16775567</pre> </p> 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [AlgoBlock]
    def algo_node_get_driver(x_api_key, opts = {})
      data, _status_code, _headers = algo_node_get_driver_with_http_info(x_api_key, opts)
      data
    end

    # Access Algorand Algod GET node endpoints
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/&lt;/a&gt;. &lt;br/&gt; Example call for Get Block is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround&lt;/a&gt;. &lt;br/&gt; URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/blocks/16775567&lt;/pre&gt; &lt;/p&gt; 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlgoBlock, Integer, Hash)>] AlgoBlock data, response status code and response headers
    def algo_node_get_driver_with_http_info(x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algo_node_get_driver ...'
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling BlockchainAlgorandALGOApi.algo_node_get_driver"
      end
      # resource path
      local_var_path = '/v3/algorand/node/algod/{xApiKey}/**'.sub('{' + 'xApiKey' + '}', x_api_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoBlock' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algo_node_get_driver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Access Algorand Indexer GET node endpoints
    # <h4>1 credit per API call.</h4><br/> <p>Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - <a href=\"https://developer.algorand.org/docs/rest-apis/indexer/\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/indexer/</a>. <br/> Example call for Get Tx By ID is described in the response. <a href=\"https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid</a>. <br/> URL used for this call would be <pre>https://api-eu1.tatum.io/v3/algorand/node/indexer/YOUR_API_KEY/v2/transactions/HNIQ76UTJYPOLZP5FWODYABBJPYPGJNEM2QEJSMDMQRWEKHEYJHQ</pre> </p> 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [AlgoTx]
    def algo_node_indexer_get_driver(x_api_key, opts = {})
      data, _status_code, _headers = algo_node_indexer_get_driver_with_http_info(x_api_key, opts)
      data
    end

    # Access Algorand Indexer GET node endpoints
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/indexer/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/indexer/&lt;/a&gt;. &lt;br/&gt; Example call for Get Tx By ID is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid&lt;/a&gt;. &lt;br/&gt; URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/indexer/YOUR_API_KEY/v2/transactions/HNIQ76UTJYPOLZP5FWODYABBJPYPGJNEM2QEJSMDMQRWEKHEYJHQ&lt;/pre&gt; &lt;/p&gt; 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlgoTx, Integer, Hash)>] AlgoTx data, response status code and response headers
    def algo_node_indexer_get_driver_with_http_info(x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algo_node_indexer_get_driver ...'
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling BlockchainAlgorandALGOApi.algo_node_indexer_get_driver"
      end
      # resource path
      local_var_path = '/v3/algorand/node/indexer/{xApiKey}/**'.sub('{' + 'xApiKey' + '}', x_api_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoTx' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algo_node_indexer_get_driver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Access Algorand Algod POST node endpoints
    # <h4>2 credits per API call.</h4><br/> <p>Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum.  You can check al available APIs here - <a href=\"https://developer.algorand.org/docs/rest-apis/algod/v2/\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/algod/v2/</a>.  <br/>  Example call for Broadcast a raw transaction is described in the response. <a href=\"https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions\" target=\"_blank\">https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions</a>.  <br/>  URL used for this call would be <pre>https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/transactions</pre>  </p> 
    # @param body 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20060]
    def algo_node_post_driver(body, x_api_key, opts = {})
      data, _status_code, _headers = algo_node_post_driver_with_http_info(body, x_api_key, opts)
      data
    end

    # Access Algorand Algod POST node endpoints
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum.  You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/&lt;/a&gt;.  &lt;br/&gt;  Example call for Broadcast a raw transaction is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions&lt;/a&gt;.  &lt;br/&gt;  URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/transactions&lt;/pre&gt;  &lt;/p&gt; 
    # @param body 
    # @param x_api_key Tatum X-API-Key used for authorization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20060, Integer, Hash)>] InlineResponse20060 data, response status code and response headers
    def algo_node_post_driver_with_http_info(body, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algo_node_post_driver ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainAlgorandALGOApi.algo_node_post_driver"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling BlockchainAlgorandALGOApi.algo_node_post_driver"
      end
      # resource path
      local_var_path = '/v3/algorand/node/algod/{xApiKey}/**'.sub('{' + 'xApiKey' + '}', x_api_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20060' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algo_node_post_driver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Broadcast signed Algorand transaction
    # <h4>2 credits per API call.</h4><br/> <p>Broadcast signed transaction to Algorand blockchain. This method is used internally from Tatum KMS or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionHashKMS]
    def algoand_broadcast(body, opts = {})
      data, _status_code, _headers = algoand_broadcast_with_http_info(body, opts)
      data
    end

    # Broadcast signed Algorand transaction
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to Algorand blockchain. This method is used internally from Tatum KMS or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionHashKMS, Integer, Hash)>] TransactionHashKMS data, response status code and response headers
    def algoand_broadcast_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algoand_broadcast ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainAlgorandALGOApi.algoand_broadcast"
      end
      # resource path
      local_var_path = '/v3/algorand/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionHashKMS' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algoand_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send ALGO from account to account
    # <h4>2 credits per API call.</h4><br/> <p>Send ALGO from account to account.<br/><br/> This operation needs the private key of the blockchain address. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def algorand_blockchain_transfer(body, opts = {})
      data, _status_code, _headers = algorand_blockchain_transfer_with_http_info(body, opts)
      data
    end

    # Send ALGO from account to account
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send ALGO from account to account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def algorand_blockchain_transfer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_blockchain_transfer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainAlgorandALGOApi.algorand_blockchain_transfer"
      end
      # resource path
      local_var_path = '/v3/algorand/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_blockchain_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate Algorand account address from private key
    # <h4>1 credit per API call.</h4><br/> <p>Generate Algorand account deposit address from private key.</p> 
    # @param priv private key of wallet.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20059]
    def algorand_generate_address(priv, opts = {})
      data, _status_code, _headers = algorand_generate_address_with_http_info(priv, opts)
      data
    end

    # Generate Algorand account address from private key
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate Algorand account deposit address from private key.&lt;/p&gt; 
    # @param priv private key of wallet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20059, Integer, Hash)>] InlineResponse20059 data, response status code and response headers
    def algorand_generate_address_with_http_info(priv, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_generate_address ...'
      end
      # verify the required parameter 'priv' is set
      if @api_client.config.client_side_validation && priv.nil?
        fail ArgumentError, "Missing the required parameter 'priv' when calling BlockchainAlgorandALGOApi.algorand_generate_address"
      end
      # resource path
      local_var_path = '/v3/algorand/address/{priv}'.sub('{' + 'priv' + '}', priv.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20059' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_generate_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate Algorand wallet
    # <h4>1 credit per API call.</h4><br/><p>Tatum supports Algorand wallets.</p> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mnemonic Mnemonic to use for generation of extended public and private keys.
    # @return [AlgoWallet]
    def algorand_generate_wallet(opts = {})
      data, _status_code, _headers = algorand_generate_wallet_with_http_info(opts)
      data
    end

    # Generate Algorand wallet
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports Algorand wallets.&lt;/p&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mnemonic Mnemonic to use for generation of extended public and private keys.
    # @return [Array<(AlgoWallet, Integer, Hash)>] AlgoWallet data, response status code and response headers
    def algorand_generate_wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_generate_wallet ...'
      end
      # resource path
      local_var_path = '/v3/algorand/wallet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mnemonic'] = opts[:'mnemonic'] if !opts[:'mnemonic'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoWallet' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_generate_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Algorand Account balance
    # <h4>1 credit per API call.</h4><br/> <p>Get Algorand account balance in ALGO.</p> 
    # @param address Account address
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20061]
    def algorand_get_balance(address, opts = {})
      data, _status_code, _headers = algorand_get_balance_with_http_info(address, opts)
      data
    end

    # Get Algorand Account balance
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get Algorand account balance in ALGO.&lt;/p&gt; 
    # @param address Account address
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20061, Integer, Hash)>] InlineResponse20061 data, response status code and response headers
    def algorand_get_balance_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_get_balance ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BlockchainAlgorandALGOApi.algorand_get_balance"
      end
      # resource path
      local_var_path = '/v3/algorand/account/balance/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20061' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_get_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Algorand block by block round number
    # <h4>1 credit per API call.</h4><br/><p>Get Algorand block by block round number.</p>
    # @param round_number Block round number
    # @param [Hash] opts the optional parameters
    # @return [AlgoBlock]
    def algorand_get_block(round_number, opts = {})
      data, _status_code, _headers = algorand_get_block_with_http_info(round_number, opts)
      data
    end

    # Get Algorand block by block round number
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand block by block round number.&lt;/p&gt;
    # @param round_number Block round number
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlgoBlock, Integer, Hash)>] AlgoBlock data, response status code and response headers
    def algorand_get_block_with_http_info(round_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_get_block ...'
      end
      # verify the required parameter 'round_number' is set
      if @api_client.config.client_side_validation && round_number.nil?
        fail ArgumentError, "Missing the required parameter 'round_number' when calling BlockchainAlgorandALGOApi.algorand_get_block"
      end
      # resource path
      local_var_path = '/v3/algorand/block/{roundNumber}'.sub('{' + 'roundNumber' + '}', round_number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoBlock' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_get_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current block number
    # <h4>1 credit per API call.</h4><br/><p>Get Algorand current block number. This is the number of the latest block in the blockchain.</p>
    # @param [Hash] opts the optional parameters
    # @return [BigDecimal]
    def algorand_get_current_block(opts = {})
      data, _status_code, _headers = algorand_get_current_block_with_http_info(opts)
      data
    end

    # Get current block number
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand current block number. This is the number of the latest block in the blockchain.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(BigDecimal, Integer, Hash)>] BigDecimal data, response status code and response headers
    def algorand_get_current_block_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_get_current_block ...'
      end
      # resource path
      local_var_path = '/v3/algorand/block/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BigDecimal' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_get_current_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Algorand Transactions between from and to
    # <h4>1 credit per API call.</h4><br/><p>Get Algorand transaction by specified period of time.</p>
    # @param from Start timestamp in specified period of time
    # @param to End timestamp in specified period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit page size for pagination
    # @option opts [String] :_next Algorand Next Token for getting the next page results
    # @return [AlgoTxsWithPagination]
    def algorand_get_pay_transactions_by_from_to(from, to, opts = {})
      data, _status_code, _headers = algorand_get_pay_transactions_by_from_to_with_http_info(from, to, opts)
      data
    end

    # Get Algorand Transactions between from and to
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand transaction by specified period of time.&lt;/p&gt;
    # @param from Start timestamp in specified period of time
    # @param to End timestamp in specified period of time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit page size for pagination
    # @option opts [String] :_next Algorand Next Token for getting the next page results
    # @return [Array<(AlgoTxsWithPagination, Integer, Hash)>] AlgoTxsWithPagination data, response status code and response headers
    def algorand_get_pay_transactions_by_from_to_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_get_pay_transactions_by_from_to ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling BlockchainAlgorandALGOApi.algorand_get_pay_transactions_by_from_to"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling BlockchainAlgorandALGOApi.algorand_get_pay_transactions_by_from_to"
      end
      # resource path
      local_var_path = '/v3/algorand/transactions/{from}/{to}'.sub('{' + 'from' + '}', from.to_s).sub('{' + 'to' + '}', to.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoTxsWithPagination' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_get_pay_transactions_by_from_to\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Algorand Transaction
    # <h4>1 credit per API call.</h4><br/><p>Get Algorand transaction by transaction id.</p>
    # @param txid Transaction id
    # @param [Hash] opts the optional parameters
    # @return [AlgoTx]
    def algorand_get_transaction(txid, opts = {})
      data, _status_code, _headers = algorand_get_transaction_with_http_info(txid, opts)
      data
    end

    # Get Algorand Transaction
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand transaction by transaction id.&lt;/p&gt;
    # @param txid Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlgoTx, Integer, Hash)>] AlgoTx data, response status code and response headers
    def algorand_get_transaction_with_http_info(txid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainAlgorandALGOApi.algorand_get_transaction ...'
      end
      # verify the required parameter 'txid' is set
      if @api_client.config.client_side_validation && txid.nil?
        fail ArgumentError, "Missing the required parameter 'txid' when calling BlockchainAlgorandALGOApi.algorand_get_transaction"
      end
      # resource path
      local_var_path = '/v3/algorand/transaction/{txid}'.sub('{' + 'txid' + '}', txid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlgoTx' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainAlgorandALGOApi#algorand_get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
