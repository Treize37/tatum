=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Tatum
  class BlockchainQTUMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get QTUM estimated gas fees
    # <h4>1 credit per API call.</h4><br/><p>Get estimated gas fees</p>
    # @param nblocks nblocks
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def estimate_fee(nblocks, opts = {})
      data, _status_code, _headers = estimate_fee_with_http_info(nblocks, opts)
      data
    end

    # Get QTUM estimated gas fees
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get estimated gas fees&lt;/p&gt;
    # @param nblocks nblocks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def estimate_fee_with_http_info(nblocks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.estimate_fee ...'
      end
      # verify the required parameter 'nblocks' is set
      if @api_client.config.client_side_validation && nblocks.nil?
        fail ArgumentError, "Missing the required parameter 'nblocks' when calling BlockchainQTUMApi.estimate_fee"
      end
      # resource path
      local_var_path = '/v3/qtum/transactions/gas/{nblocks}'.sub('{' + 'nblocks' + '}', nblocks.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#estimate_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get QTUM estimated gas fees per byte
    # <h4>1 credit per API call.</h4><br/><p>Get estimated gas fees per byte</p>
    # @param nblocks nblocks
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def estimate_fee_per_byte(nblocks, opts = {})
      data, _status_code, _headers = estimate_fee_per_byte_with_http_info(nblocks, opts)
      data
    end

    # Get QTUM estimated gas fees per byte
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get estimated gas fees per byte&lt;/p&gt;
    # @param nblocks nblocks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def estimate_fee_per_byte_with_http_info(nblocks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.estimate_fee_per_byte ...'
      end
      # verify the required parameter 'nblocks' is set
      if @api_client.config.client_side_validation && nblocks.nil?
        fail ArgumentError, "Missing the required parameter 'nblocks' when calling BlockchainQTUMApi.estimate_fee_per_byte"
      end
      # resource path
      local_var_path = '/v3/qtum/transactions/gasbytes/{nblocks}'.sub('{' + 'nblocks' + '}', nblocks.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#estimate_fee_per_byte\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate QTUM Address from private key
    # <h4>1 credit per API call.</h4><br/><p>Generate Address by private key</p>
    # @param key Private key
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20077]
    def generate_address_privatekey(key, opts = {})
      data, _status_code, _headers = generate_address_privatekey_with_http_info(key, opts)
      data
    end

    # Generate QTUM Address from private key
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Generate Address by private key&lt;/p&gt;
    # @param key Private key
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20077, Integer, Hash)>] InlineResponse20077 data, response status code and response headers
    def generate_address_privatekey_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.generate_address_privatekey ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling BlockchainQTUMApi.generate_address_privatekey"
      end
      # resource path
      local_var_path = '/v3/qtum/address/{key}'.sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20077' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#generate_address_privatekey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate QTUM private key
    # <h4>1 credit per API call.</h4><br/><p>Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Qtum wallet with derivation path defined by QTUM. More about BIP44 HD wallets can be found here - <a target=\"_blank\" href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>. Generate BIP44 compatible QTUM wallet.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20076]
    def generate_private_key_from_mnemonic(body, opts = {})
      data, _status_code, _headers = generate_private_key_from_mnemonic_with_http_info(body, opts)
      data
    end

    # Generate QTUM private key
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value, which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows BIP44 specification and generates for Qtum wallet with derivation path defined by QTUM. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;. Generate BIP44 compatible QTUM wallet.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20076, Integer, Hash)>] InlineResponse20076 data, response status code and response headers
    def generate_private_key_from_mnemonic_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.generate_private_key_from_mnemonic ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainQTUMApi.generate_private_key_from_mnemonic"
      end
      # resource path
      local_var_path = '/v3/qtum/wallet/priv'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20076' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#generate_private_key_from_mnemonic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get QTUM Transactions by address
    # <h4>1 credit per API call.</h4><br/><p>Get QTUM paginated transactions by address.</p>
    # @param address Address
    # @param page_size pageSize
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset offset
    # @return [QtumIRawTransactions]
    def get_qtum_paginated_transaction(address, page_size, opts = {})
      data, _status_code, _headers = get_qtum_paginated_transaction_with_http_info(address, page_size, opts)
      data
    end

    # Get QTUM Transactions by address
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM paginated transactions by address.&lt;/p&gt;
    # @param address Address
    # @param page_size pageSize
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :offset offset
    # @return [Array<(QtumIRawTransactions, Integer, Hash)>] QtumIRawTransactions data, response status code and response headers
    def get_qtum_paginated_transaction_with_http_info(address, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.get_qtum_paginated_transaction ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BlockchainQTUMApi.get_qtum_paginated_transaction"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling BlockchainQTUMApi.get_qtum_paginated_transaction"
      end
      # resource path
      local_var_path = '/v3/qtum/transactions/address/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = page_size
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumIRawTransactions' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#get_qtum_paginated_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get QTUM Transaction
    # <h4>1 credit per API call.</h4><br/><p>Get QTUM transaction by transaction hash.</p>
    # @param id Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [QtumIRawTransactionInfo]
    def get_qtum_transaction(id, opts = {})
      data, _status_code, _headers = get_qtum_transaction_with_http_info(id, opts)
      data
    end

    # Get QTUM Transaction
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM transaction by transaction hash.&lt;/p&gt;
    # @param id Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(QtumIRawTransactionInfo, Integer, Hash)>] QtumIRawTransactionInfo data, response status code and response headers
    def get_qtum_transaction_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.get_qtum_transaction ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BlockchainQTUMApi.get_qtum_transaction"
      end
      # resource path
      local_var_path = '/v3/qtum/transaction/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumIRawTransactionInfo' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#get_qtum_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get UTXO
    # <h4>1 credit per API call.</h4><br/><p>Get UTXOS by address</p>
    # @param address address
    # @param [Hash] opts the optional parameters
    # @return [QtumIUTXO]
    def get_qtum_utx_os(address, opts = {})
      data, _status_code, _headers = get_qtum_utx_os_with_http_info(address, opts)
      data
    end

    # Get UTXO
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get UTXOS by address&lt;/p&gt;
    # @param address address
    # @param [Hash] opts the optional parameters
    # @return [Array<(QtumIUTXO, Integer, Hash)>] QtumIUTXO data, response status code and response headers
    def get_qtum_utx_os_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.get_qtum_utx_os ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BlockchainQTUMApi.get_qtum_utx_os"
      end
      # resource path
      local_var_path = '/v3/qtum/utxo/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumIUTXO' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#get_qtum_utx_os\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Broadcast signed QTUM transaction
    # <h4>2 credits per API call.</h4><br/> <p>Broadcast signed transaction to QTUM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionHashKMS]
    def qtum_broadcast(body, opts = {})
      data, _status_code, _headers = qtum_broadcast_with_http_info(body, opts)
      data
    end

    # Broadcast signed QTUM transaction
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to QTUM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionHashKMS, Integer, Hash)>] TransactionHashKMS data, response status code and response headers
    def qtum_broadcast_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_broadcast ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainQTUMApi.qtum_broadcast"
      end
      # resource path
      local_var_path = '/v3/qtum/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionHashKMS' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate QTUM account address from Extended public key
    # <h4>1 credit per API call.</h4><br/> <p>Generate QTUM account deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate up to 2^31 addresses starting from index 0 until 2^31.</p> 
    # @param xpub Extended public key of wallet.
    # @param i Derivation index of desired address to be generated.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20075]
    def qtum_generate_address(xpub, i, opts = {})
      data, _status_code, _headers = qtum_generate_address_with_http_info(xpub, i, opts)
      data
    end

    # Generate QTUM account address from Extended public key
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate QTUM account deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate up to 2^31 addresses starting from index 0 until 2^31.&lt;/p&gt; 
    # @param xpub Extended public key of wallet.
    # @param i Derivation index of desired address to be generated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20075, Integer, Hash)>] InlineResponse20075 data, response status code and response headers
    def qtum_generate_address_with_http_info(xpub, i, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_generate_address ...'
      end
      # verify the required parameter 'xpub' is set
      if @api_client.config.client_side_validation && xpub.nil?
        fail ArgumentError, "Missing the required parameter 'xpub' when calling BlockchainQTUMApi.qtum_generate_address"
      end
      # verify the required parameter 'i' is set
      if @api_client.config.client_side_validation && i.nil?
        fail ArgumentError, "Missing the required parameter 'i' when calling BlockchainQTUMApi.qtum_generate_address"
      end
      # resource path
      local_var_path = '/v3/qtum/address/{xpub}/{i}'.sub('{' + 'xpub' + '}', xpub.to_s).sub('{' + 'i' + '}', i.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20075' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_generate_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate QTUM wallet
    # <h4>1 credit per API call.</h4><br/><p>Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Qtum wallet with derivation path m'/44'/2301'/0'/0. More about BIP44 HD wallets can be found here - <a target=\"_blank\" href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>.         Generate BIP44 compatible QTum wallet.</p> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mnemonic Mnemonic
    # @return [QtumWallet]
    def qtum_generate_wallet(opts = {})
      data, _status_code, _headers = qtum_generate_wallet_with_http_info(opts)
      data
    end

    # Generate QTUM wallet
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value, which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows BIP44 specification and generates for Qtum wallet with derivation path m&#x27;/44&#x27;/2301&#x27;/0&#x27;/0. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;.         Generate BIP44 compatible QTum wallet.&lt;/p&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mnemonic Mnemonic
    # @return [Array<(QtumWallet, Integer, Hash)>] QtumWallet data, response status code and response headers
    def qtum_generate_wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_generate_wallet ...'
      end
      # resource path
      local_var_path = '/v3/qtum/wallet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mnemonic'] = opts[:'mnemonic'] if !opts[:'mnemonic'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumWallet' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_generate_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get QTUM Account balance
    # <h4>1 credit per API call.</h4><br/><p>Get QTUM account balance in QTUM tokens on an account.</p>
    # @param address Account address
    # @param [Hash] opts the optional parameters
    # @return [QtumIGetInfo]
    def qtum_get_balance(address, opts = {})
      data, _status_code, _headers = qtum_get_balance_with_http_info(address, opts)
      data
    end

    # Get QTUM Account balance
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM account balance in QTUM tokens on an account.&lt;/p&gt;
    # @param address Account address
    # @param [Hash] opts the optional parameters
    # @return [Array<(QtumIGetInfo, Integer, Hash)>] QtumIGetInfo data, response status code and response headers
    def qtum_get_balance_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_get_balance ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BlockchainQTUMApi.qtum_get_balance"
      end
      # resource path
      local_var_path = '/v3/qtum/account/balance/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumIGetInfo' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_get_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get QTUM block by hash
    # <h4>1 credit per API call.</h4><br/><p>Get BSC block by block hash or block number.</p>
    # @param hash Block hash or block number
    # @param [Hash] opts the optional parameters
    # @return [QtumBlock]
    def qtum_get_block(hash, opts = {})
      data, _status_code, _headers = qtum_get_block_with_http_info(hash, opts)
      data
    end

    # Get QTUM block by hash
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get BSC block by block hash or block number.&lt;/p&gt;
    # @param hash Block hash or block number
    # @param [Hash] opts the optional parameters
    # @return [Array<(QtumBlock, Integer, Hash)>] QtumBlock data, response status code and response headers
    def qtum_get_block_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_get_block ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling BlockchainQTUMApi.qtum_get_block"
      end
      # resource path
      local_var_path = '/v3/qtum/block/{hash}'.sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'QtumBlock' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_get_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current block number
    # <h4>1 credit per API call.</h4><br/><p>Get QTUM current block number. This is the number of the latest block in the blockchain.</p>
    # @param [Hash] opts the optional parameters
    # @return [BigDecimal]
    def qtum_get_current_block(opts = {})
      data, _status_code, _headers = qtum_get_current_block_with_http_info(opts)
      data
    end

    # Get current block number
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM current block number. This is the number of the latest block in the blockchain.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(BigDecimal, Integer, Hash)>] BigDecimal data, response status code and response headers
    def qtum_get_current_block_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainQTUMApi.qtum_get_current_block ...'
      end
      # resource path
      local_var_path = '/v3/qtum/block/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BigDecimal' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainQTUMApi#qtum_get_current_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
