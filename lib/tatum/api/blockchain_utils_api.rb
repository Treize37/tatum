=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Tatum
  class BlockchainUtilsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve transfer of assets from custodial wallet
    # <h4>2 credits per API call.</h4><br/> <p>Approve transfer of assets from the custodial smart contract wallet.<br/> Supported blockchains: <ul> <li>Binance Smart Chain</li> <li>Harmony.ONE</li> <li>Ethereum</li> <li>Celo</li> <li>Harmony.ONE</li> <li>XDC Network (XinFin)</li> <li>Polygon (Matic)</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def approve_transfer_custodial_wallet(body, opts = {})
      data, _status_code, _headers = approve_transfer_custodial_wallet_with_http_info(body, opts)
      data
    end

    # Approve transfer of assets from custodial wallet
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Approve transfer of assets from the custodial smart contract wallet.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;XDC Network (XinFin)&lt;/li&gt; &lt;li&gt;Polygon (Matic)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def approve_transfer_custodial_wallet_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.approve_transfer_custodial_wallet ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.approve_transfer_custodial_wallet"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial/approve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#approve_transfer_custodial_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Estimate fee for transaction
    # <h4>2 credits per API call.</h4><br/> <p>Estimate current transaction fee for different operations.<br/> Supported blockchains: <ul> <li>Bitcoin</li> <li>Litecoin</li> <li>Harmony.ONE</li> <li>The XDC Network</li> <li>Ethereum</li> <li>Celo</li> <li>Binance Smart Chain</li> <li>Polygon</li> <li>Elrond</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def estimate_fee_blockchain(body, opts = {})
      data, _status_code, _headers = estimate_fee_blockchain_with_http_info(body, opts)
      data
    end

    # Estimate fee for transaction
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Estimate current transaction fee for different operations.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Bitcoin&lt;/li&gt; &lt;li&gt;Litecoin&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;The XDC Network&lt;/li&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Polygon&lt;/li&gt; &lt;li&gt;Elrond&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def estimate_fee_blockchain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.estimate_fee_blockchain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.estimate_fee_blockchain"
      end
      # resource path
      local_var_path = '/v3/blockchain/estimate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2006' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#estimate_fee_blockchain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate custodial wallet address
    # <h4>2 credits per API call.</h4><br/> <p>Generate new custodial smart contract address on the blockchain. It's possible to enable tokens, which should be detected and supported on that address. This address enables custodial providers to receive native assets, ERC20 / ERC721 / ERC1155 tokens on behalf of their customers on dedicated blockchain address, but in the same time it can initiate transfer of those assets away. Gas required for the transfer from that address is going to be deducted from the providers address - the one, which was used to generate the address on the blockchain.<br/> There are multiple options, how this address can be setup - it cannot be changed in the future: <ul> <li>Native assets only - ETH, BSC, CELO, MATIC, ONE, TRX</li> <li>Native assets + ERC20 tokens</li> <li>Native assets + ERC721 tokens</li> <li>Native assets + ERC1155 tokens - TRON does not support 1155 standard</li> <li>Native assets + ERC20 + ERC721 tokens</li> <li>Native assets + ERC20 + ERC1155 tokens - TRON does not support 1155 standard</li> <li>Native assets + ERC721 + ERC1155 tokens - TRON does not support 1155 standard</li> <li>Native assets + ERC20 + ERC721 + ERC1155 tokens - TRON does not support 1155 standard</li> </ul><br/> All of these options could be enabled with a batch mode as well - in 1 transaction, it is possible to transfer multiple different assets from that address, e.g. ETH + USDC + ERC721 token. Without batch mode, 3 separate transaction must have been performed.<br/> This operation deploys a smart contract on the blockchain. More assets you will support, more intial gas will be used for address creation. Batch mode adds more gas for every type.<br/> Supported blockchains: <ul> <li>Binance Smart Chain</li> <li>Harmony.ONE</li> <li>Ethereum</li> <li>Celo</li> <li>TRON - without 1155</li> <li>Polygon (Matic)</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def generate_custodial_wallet(body, opts = {})
      data, _status_code, _headers = generate_custodial_wallet_with_http_info(body, opts)
      data
    end

    # Generate custodial wallet address
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate new custodial smart contract address on the blockchain. It&#x27;s possible to enable tokens, which should be detected and supported on that address. This address enables custodial providers to receive native assets, ERC20 / ERC721 / ERC1155 tokens on behalf of their customers on dedicated blockchain address, but in the same time it can initiate transfer of those assets away. Gas required for the transfer from that address is going to be deducted from the providers address - the one, which was used to generate the address on the blockchain.&lt;br/&gt; There are multiple options, how this address can be setup - it cannot be changed in the future: &lt;ul&gt; &lt;li&gt;Native assets only - ETH, BSC, CELO, MATIC, ONE, TRX&lt;/li&gt; &lt;li&gt;Native assets + ERC20 tokens&lt;/li&gt; &lt;li&gt;Native assets + ERC721 tokens&lt;/li&gt; &lt;li&gt;Native assets + ERC1155 tokens - TRON does not support 1155 standard&lt;/li&gt; &lt;li&gt;Native assets + ERC20 + ERC721 tokens&lt;/li&gt; &lt;li&gt;Native assets + ERC20 + ERC1155 tokens - TRON does not support 1155 standard&lt;/li&gt; &lt;li&gt;Native assets + ERC721 + ERC1155 tokens - TRON does not support 1155 standard&lt;/li&gt; &lt;li&gt;Native assets + ERC20 + ERC721 + ERC1155 tokens - TRON does not support 1155 standard&lt;/li&gt; &lt;/ul&gt;&lt;br/&gt; All of these options could be enabled with a batch mode as well - in 1 transaction, it is possible to transfer multiple different assets from that address, e.g. ETH + USDC + ERC721 token. Without batch mode, 3 separate transaction must have been performed.&lt;br/&gt; This operation deploys a smart contract on the blockchain. More assets you will support, more intial gas will be used for address creation. Batch mode adds more gas for every type.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;TRON - without 1155&lt;/li&gt; &lt;li&gt;Polygon (Matic)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def generate_custodial_wallet_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.generate_custodial_wallet ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.generate_custodial_wallet"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#generate_custodial_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate custodial wallet address
    # <h4>2 credits per API call.</h4><br/> <p>Generate new custodial smart contract address on the blockchain. This address enables custodial providers to receive native assets, ERC20 / ERC721 / ERC1155 tokens on behalf of their customers on dedicated blockchain address, but in the same time it can initiate transfer of those assets away. Gas required for the transfer from that address is going to be deducted from the providers address - the one, which was used to generate the address on the blockchain.<br/> This operation deploys a smart contract on the blockchain.<br/> Supported blockchains: <ul> <li>Ethereum</li> <li>Binance Smart Chain</li> <li>Celo</li> <li>Polygon (Matic)</li> <li>Harmony.ONE</li> <li>XDC Network (XinFin)</li> <li>Tron</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten. (default to ethereum-ropsten)
    # @return [InlineResponse2005]
    def generate_custodial_wallet_batch(body, opts = {})
      data, _status_code, _headers = generate_custodial_wallet_batch_with_http_info(body, opts)
      data
    end

    # Generate custodial wallet address
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate new custodial smart contract address on the blockchain. This address enables custodial providers to receive native assets, ERC20 / ERC721 / ERC1155 tokens on behalf of their customers on dedicated blockchain address, but in the same time it can initiate transfer of those assets away. Gas required for the transfer from that address is going to be deducted from the providers address - the one, which was used to generate the address on the blockchain.&lt;br/&gt; This operation deploys a smart contract on the blockchain.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;Polygon (Matic)&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;XDC Network (XinFin)&lt;/li&gt; &lt;li&gt;Tron&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def generate_custodial_wallet_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.generate_custodial_wallet_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.generate_custodial_wallet_batch"
      end
      if @api_client.config.client_side_validation && opts[:'x_testnet_type'] && !['ethereum-ropsten', 'ethereum-rinkeby'].include?(opts[:'x_testnet_type'])
        fail ArgumentError, 'invalid value for "x_testnet_type", must be one of ethereum-ropsten, ethereum-rinkeby'
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-testnet-type'] = opts[:'x_testnet_type'] if !opts[:'x_testnet_type'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#generate_custodial_wallet_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get contract address from transaction
    # <h4>1 credit per API call.</h4><br/><p>Get smart contract address from deploy transaction.</p>
    # @param chain Blockchain to work with
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def s_c_get_contract_address(chain, hash, opts = {})
      data, _status_code, _headers = s_c_get_contract_address_with_http_info(chain, hash, opts)
      data
    end

    # Get contract address from transaction
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get smart contract address from deploy transaction.&lt;/p&gt;
    # @param chain Blockchain to work with
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def s_c_get_contract_address_with_http_info(chain, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.s_c_get_contract_address ...'
      end
      # verify the required parameter 'chain' is set
      if @api_client.config.client_side_validation && chain.nil?
        fail ArgumentError, "Missing the required parameter 'chain' when calling BlockchainUtilsApi.s_c_get_contract_address"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ETH', 'ONE', 'CELO', 'TRON', 'MATIC', 'BSC'].include?(chain)
        fail ArgumentError, "invalid value for 'chain', must be one of ETH, ONE, CELO, TRON, MATIC, BSC"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling BlockchainUtilsApi.s_c_get_contract_address"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/address/{chain}/{hash}'.sub('{' + 'chain' + '}', chain.to_s).sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2007' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#s_c_get_contract_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get custodial addresses from transaction
    # <h4>1 credit per API call.</h4><br/><p>Get custodial smart contract addresses from deploy transaction.</p>
    # @param chain Blockchain to work with
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def s_c_get_custodial_addresses(chain, hash, opts = {})
      data, _status_code, _headers = s_c_get_custodial_addresses_with_http_info(chain, hash, opts)
      data
    end

    # Get custodial addresses from transaction
    # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get custodial smart contract addresses from deploy transaction.&lt;/p&gt;
    # @param chain Blockchain to work with
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def s_c_get_custodial_addresses_with_http_info(chain, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.s_c_get_custodial_addresses ...'
      end
      # verify the required parameter 'chain' is set
      if @api_client.config.client_side_validation && chain.nil?
        fail ArgumentError, "Missing the required parameter 'chain' when calling BlockchainUtilsApi.s_c_get_custodial_addresses"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CELO', 'MATIC', 'BSC'].include?(chain)
        fail ArgumentError, "invalid value for 'chain', must be one of CELO, MATIC, BSC"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling BlockchainUtilsApi.s_c_get_custodial_addresses"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial/{chain}/{hash}'.sub('{' + 'chain' + '}', chain.to_s).sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<String>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#s_c_get_custodial_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer assets from custodial wallet
    # <h4>2 credits per API call.</h4><br/> <p>Transfer assets from the custodial smart contract wallet. Originator of this transaction must be the address which created the address. It's possible to transfer only 1 assets in 1 transaction.<br/> Supported blockchains: <ul> <li>Binance Smart Chain</li> <li>Harmony.ONE</li> <li>Ethereum</li> <li>Celo</li> <li>TRON</li> <li>XDC Network (XinFin)</li> <li>Polygon (Matic)</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def transfer_custodial_wallet(body, opts = {})
      data, _status_code, _headers = transfer_custodial_wallet_with_http_info(body, opts)
      data
    end

    # Transfer assets from custodial wallet
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Transfer assets from the custodial smart contract wallet. Originator of this transaction must be the address which created the address. It&#x27;s possible to transfer only 1 assets in 1 transaction.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;TRON&lt;/li&gt; &lt;li&gt;XDC Network (XinFin)&lt;/li&gt; &lt;li&gt;Polygon (Matic)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def transfer_custodial_wallet_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.transfer_custodial_wallet ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.transfer_custodial_wallet"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial/transfer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#transfer_custodial_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer multiple assets from custodial wallet
    # <h4>2 credits per API call.</h4><br/> <p>Transfer assets from the custodial smart contract wallet. Originator of this transaction must be the address which created the address. It's possible to transfer any amount of different assets in 1 transaction, if the wallet was generated with the batch option enabled.<br/> Supported blockchains: <ul> <li>Binance Smart Chain</li> <li>Harmony.ONE</li> <li>XDC Network (XinFin)</li> <li>Ethereum</li> <li>Celo</li> <li>Tron</li> <li>Polygon (Matic)</li> </ul> </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def transfer_custodial_wallet_batch(body, opts = {})
      data, _status_code, _headers = transfer_custodial_wallet_batch_with_http_info(body, opts)
      data
    end

    # Transfer multiple assets from custodial wallet
    # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Transfer assets from the custodial smart contract wallet. Originator of this transaction must be the address which created the address. It&#x27;s possible to transfer any amount of different assets in 1 transaction, if the wallet was generated with the batch option enabled.&lt;br/&gt; Supported blockchains: &lt;ul&gt; &lt;li&gt;Binance Smart Chain&lt;/li&gt; &lt;li&gt;Harmony.ONE&lt;/li&gt; &lt;li&gt;XDC Network (XinFin)&lt;/li&gt; &lt;li&gt;Ethereum&lt;/li&gt; &lt;li&gt;Celo&lt;/li&gt; &lt;li&gt;Tron&lt;/li&gt; &lt;li&gt;Polygon (Matic)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def transfer_custodial_wallet_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainUtilsApi.transfer_custodial_wallet_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainUtilsApi.transfer_custodial_wallet_batch"
      end
      # resource path
      local_var_path = '/v3/blockchain/sc/custodial/transfer/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainUtilsApi#transfer_custodial_wallet_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
