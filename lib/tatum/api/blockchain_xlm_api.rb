=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Tatum
  class BlockchainXLMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Broadcast signed XLM transaction
    # <h4>5 credits per API call.</h4><br/> <p>Broadcast signed transaction to XLM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionHashKMS]
    def xlm_broadcast(body, opts = {})
      data, _status_code, _headers = xlm_broadcast_with_http_info(body, opts)
      data
    end

    # Broadcast signed XLM transaction
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to XLM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionHashKMS, Integer, Hash)>] TransactionHashKMS data, response status code and response headers
    def xlm_broadcast_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_broadcast ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXLMApi.xlm_broadcast"
      end
      # resource path
      local_var_path = '/v3/xlm/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionHashKMS' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Account info
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Account detail.</p>
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [XlmAccount]
    def xlm_get_account_info(account, opts = {})
      data, _status_code, _headers = xlm_get_account_info_with_http_info(account, opts)
      data
    end

    # Get XLM Account info
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Account detail.&lt;/p&gt;
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [Array<(XlmAccount, Integer, Hash)>] XlmAccount data, response status code and response headers
    def xlm_get_account_info_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_account_info ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BlockchainXLMApi.xlm_get_account_info"
      end
      # resource path
      local_var_path = '/v3/xlm/account/{account}'.sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XlmAccount' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Account transactions
    # <h4>5 credits per API call.</h4><br/><p>List all XLM account transactions.</p>
    # @param account Address of XLM account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination Paging token from the last transaction gives you next page
    # @return [Array<XlmTx>]
    def xlm_get_account_tx(account, opts = {})
      data, _status_code, _headers = xlm_get_account_tx_with_http_info(account, opts)
      data
    end

    # Get XLM Account transactions
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;List all XLM account transactions.&lt;/p&gt;
    # @param account Address of XLM account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination Paging token from the last transaction gives you next page
    # @return [Array<(Array<XlmTx>, Integer, Hash)>] Array<XlmTx> data, response status code and response headers
    def xlm_get_account_tx_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_account_tx ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BlockchainXLMApi.xlm_get_account_tx"
      end
      # resource path
      local_var_path = '/v3/xlm/account/tx/{account}'.sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pagination'] = opts[:'pagination'] if !opts[:'pagination'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<XlmTx>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_account_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get actual XLM fee
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain fee in 1/10000000 of XLM (stroop)</p>
    # @param [Hash] opts the optional parameters
    # @return [BigDecimal]
    def xlm_get_fee(opts = {})
      data, _status_code, _headers = xlm_get_fee_with_http_info(opts)
      data
    end

    # Get actual XLM fee
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain fee in 1/10000000 of XLM (stroop)&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(BigDecimal, Integer, Hash)>] BigDecimal data, response status code and response headers
    def xlm_get_fee_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_fee ...'
      end
      # resource path
      local_var_path = '/v3/xlm/fee'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BigDecimal' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Blockchain Information
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain last closed ledger.</p>
    # @param [Hash] opts the optional parameters
    # @return [XlmLedger]
    def xlm_get_last_closed_ledger(opts = {})
      data, _status_code, _headers = xlm_get_last_closed_ledger_with_http_info(opts)
      data
    end

    # Get XLM Blockchain Information
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain last closed ledger.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(XlmLedger, Integer, Hash)>] XlmLedger data, response status code and response headers
    def xlm_get_last_closed_ledger_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_last_closed_ledger ...'
      end
      # resource path
      local_var_path = '/v3/xlm/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XlmLedger' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_last_closed_ledger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Blockchain Ledger by sequence
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain ledger for ledger sequence.</p>
    # @param sequence Sequence of the ledger.
    # @param [Hash] opts the optional parameters
    # @return [XlmLedger]
    def xlm_get_ledger(sequence, opts = {})
      data, _status_code, _headers = xlm_get_ledger_with_http_info(sequence, opts)
      data
    end

    # Get XLM Blockchain Ledger by sequence
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain ledger for ledger sequence.&lt;/p&gt;
    # @param sequence Sequence of the ledger.
    # @param [Hash] opts the optional parameters
    # @return [Array<(XlmLedger, Integer, Hash)>] XlmLedger data, response status code and response headers
    def xlm_get_ledger_with_http_info(sequence, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_ledger ...'
      end
      # verify the required parameter 'sequence' is set
      if @api_client.config.client_side_validation && sequence.nil?
        fail ArgumentError, "Missing the required parameter 'sequence' when calling BlockchainXLMApi.xlm_get_ledger"
      end
      # resource path
      local_var_path = '/v3/xlm/ledger/{sequence}'.sub('{' + 'sequence' + '}', sequence.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XlmLedger' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_ledger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Blockchain Transactions in Ledger
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain transactions in the ledger.</p>
    # @param sequence Sequence of the ledger.
    # @param [Hash] opts the optional parameters
    # @return [Array<XlmTx>]
    def xlm_get_ledger_tx(sequence, opts = {})
      data, _status_code, _headers = xlm_get_ledger_tx_with_http_info(sequence, opts)
      data
    end

    # Get XLM Blockchain Transactions in Ledger
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain transactions in the ledger.&lt;/p&gt;
    # @param sequence Sequence of the ledger.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<XlmTx>, Integer, Hash)>] Array<XlmTx> data, response status code and response headers
    def xlm_get_ledger_tx_with_http_info(sequence, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_ledger_tx ...'
      end
      # verify the required parameter 'sequence' is set
      if @api_client.config.client_side_validation && sequence.nil?
        fail ArgumentError, "Missing the required parameter 'sequence' when calling BlockchainXLMApi.xlm_get_ledger_tx"
      end
      # resource path
      local_var_path = '/v3/xlm/ledger/{sequence}/transaction'.sub('{' + 'sequence' + '}', sequence.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<XlmTx>' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_ledger_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XLM Transaction by hash
    # <h4>5 credits per API call.</h4><br/><p>Get XLM Transaction by transaction hash.</p>
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [XlmTx]
    def xlm_get_transaction(hash, opts = {})
      data, _status_code, _headers = xlm_get_transaction_with_http_info(hash, opts)
      data
    end

    # Get XLM Transaction by hash
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Transaction by transaction hash.&lt;/p&gt;
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(XlmTx, Integer, Hash)>] XlmTx data, response status code and response headers
    def xlm_get_transaction_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_get_transaction ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling BlockchainXLMApi.xlm_get_transaction"
      end
      # resource path
      local_var_path = '/v3/xlm/transaction/{hash}'.sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XlmTx' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send XLM from address to address
    # <h4>10 credits per API call.</h4><br/> <p>Send XLM from account to account. It is possbile to send native XLM asset, or any other custom asset present on the network.<br/><br/> This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def xlm_transfer_blockchain(body, opts = {})
      data, _status_code, _headers = xlm_transfer_blockchain_with_http_info(body, opts)
      data
    end

    # Send XLM from address to address
    # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send XLM from account to account. It is possbile to send native XLM asset, or any other custom asset present on the network.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def xlm_transfer_blockchain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_transfer_blockchain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXLMApi.xlm_transfer_blockchain"
      end
      # resource path
      local_var_path = '/v3/xlm/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_transfer_blockchain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create / Update / Delete XLM trust line
    # <h4>10 credits per API call.</h4><br/><p> <p>Create / Update / Delete XLM trust line between accounts to transfer private assets. By creating trustline for the first time, the asset is created automatically and can be used in the transactions.<br/><br/> This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def xlm_trust_line_blockchain(body, opts = {})
      data, _status_code, _headers = xlm_trust_line_blockchain_with_http_info(body, opts)
      data
    end

    # Create / Update / Delete XLM trust line
    # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt; &lt;p&gt;Create / Update / Delete XLM trust line between accounts to transfer private assets. By creating trustline for the first time, the asset is created automatically and can be used in the transactions.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def xlm_trust_line_blockchain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_trust_line_blockchain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXLMApi.xlm_trust_line_blockchain"
      end
      # resource path
      local_var_path = '/v3/xlm/trust'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_trust_line_blockchain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate XLM account
    # <h4>5 credits per API call.</h4><br/> <p>Generate XLM account. Tatum does not support HD wallet for XLM, only specific address and private key can be generated.</p> 
    # @param [Hash] opts the optional parameters
    # @return [XlmWallet]
    def xlm_wallet(opts = {})
      data, _status_code, _headers = xlm_wallet_with_http_info(opts)
      data
    end

    # Generate XLM account
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate XLM account. Tatum does not support HD wallet for XLM, only specific address and private key can be generated.&lt;/p&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XlmWallet, Integer, Hash)>] XlmWallet data, response status code and response headers
    def xlm_wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXLMApi.xlm_wallet ...'
      end
      # resource path
      local_var_path = '/v3/xlm/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XlmWallet' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXLMApi#xlm_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
