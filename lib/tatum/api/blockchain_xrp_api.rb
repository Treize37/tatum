=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Tatum
  class BlockchainXRPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Modify XRP account
    # <h4>10 credits per API call.</h4><br/><p> <p>Modify XRP account settings. If an XRP account should be an issuer of the custom asset, this accounts should have rippling enabled to true. In order to support off-chain processing, required destination tag should be set on the account.<br/><br/> This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def xrp_account_settings(body, opts = {})
      data, _status_code, _headers = xrp_account_settings_with_http_info(body, opts)
      data
    end

    # Modify XRP account
    # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt; &lt;p&gt;Modify XRP account settings. If an XRP account should be an issuer of the custom asset, this accounts should have rippling enabled to true. In order to support off-chain processing, required destination tag should be set on the account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def xrp_account_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_account_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXRPApi.xrp_account_settings"
      end
      # resource path
      local_var_path = '/v3/xrp/account/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Broadcast signed XRP transaction
    # <h4>5 credits per API call.</h4><br/> <p>Broadcast signed transaction to XRP blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionHashKMS]
    def xrp_broadcast(body, opts = {})
      data, _status_code, _headers = xrp_broadcast_with_http_info(body, opts)
      data
    end

    # Broadcast signed XRP transaction
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to XRP blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionHashKMS, Integer, Hash)>] TransactionHashKMS data, response status code and response headers
    def xrp_broadcast_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_broadcast ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXRPApi.xrp_broadcast"
      end
      # resource path
      local_var_path = '/v3/xrp/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TransactionHashKMS' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Account Balance
    # <h4>5 credits per API call.</h4><br/><p>Get XRP Account Balance. Obtain balance of the XRP and other assets on the account.</p>
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [XrpAccountBalance]
    def xrp_get_account_balance(account, opts = {})
      data, _status_code, _headers = xrp_get_account_balance_with_http_info(account, opts)
      data
    end

    # Get Account Balance
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XRP Account Balance. Obtain balance of the XRP and other assets on the account.&lt;/p&gt;
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpAccountBalance, Integer, Hash)>] XrpAccountBalance data, response status code and response headers
    def xrp_get_account_balance_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_account_balance ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BlockchainXRPApi.xrp_get_account_balance"
      end
      # resource path
      local_var_path = '/v3/xrp/account/{account}/balance'.sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpAccountBalance' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Account info
    # <h4>5 credits per API call.</h4><br/><p>Get XRP Account info.</p>
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [XrpAccount]
    def xrp_get_account_info(account, opts = {})
      data, _status_code, _headers = xrp_get_account_info_with_http_info(account, opts)
      data
    end

    # Get Account info
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XRP Account info.&lt;/p&gt;
    # @param account Account address
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpAccount, Integer, Hash)>] XrpAccount data, response status code and response headers
    def xrp_get_account_info_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_account_info ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BlockchainXRPApi.xrp_get_account_info"
      end
      # resource path
      local_var_path = '/v3/xrp/account/{account}'.sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpAccount' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Account transactions
    # <h4>5 credits per API call.</h4><br/><p>List all Account transactions.</p>
    # @param account Address of XRP account.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :min Ledger version to start scanning for transactions from.
    # @option opts [String] :marker Marker from the last paginated request. It is stringified JSON from previous response.
    # @return [XrpAccountTx]
    def xrp_get_account_tx(account, opts = {})
      data, _status_code, _headers = xrp_get_account_tx_with_http_info(account, opts)
      data
    end

    # Get Account transactions
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;List all Account transactions.&lt;/p&gt;
    # @param account Address of XRP account.
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :min Ledger version to start scanning for transactions from.
    # @option opts [String] :marker Marker from the last paginated request. It is stringified JSON from previous response.
    # @return [Array<(XrpAccountTx, Integer, Hash)>] XrpAccountTx data, response status code and response headers
    def xrp_get_account_tx_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_account_tx ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BlockchainXRPApi.xrp_get_account_tx"
      end
      # resource path
      local_var_path = '/v3/xrp/account/tx/{account}'.sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'min'] = opts[:'min'] if !opts[:'min'].nil?
      query_params[:'marker'] = opts[:'marker'] if !opts[:'marker'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpAccountTx' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_account_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get actual Blockchain fee
    # <h4>5 credits per API call.</h4><br/> <p>Get XRP Blockchain fee. Standard fee for the transaction is available in the drops.base_fee section and is 10 XRP drops by default. When there is a heavy traffic on the blockchain, fees are increasing according to current traffic.</p> 
    # @param [Hash] opts the optional parameters
    # @return [XrpFee]
    def xrp_get_fee(opts = {})
      data, _status_code, _headers = xrp_get_fee_with_http_info(opts)
      data
    end

    # Get actual Blockchain fee
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get XRP Blockchain fee. Standard fee for the transaction is available in the drops.base_fee section and is 10 XRP drops by default. When there is a heavy traffic on the blockchain, fees are increasing according to current traffic.&lt;/p&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpFee, Integer, Hash)>] XrpFee data, response status code and response headers
    def xrp_get_fee_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_fee ...'
      end
      # resource path
      local_var_path = '/v3/xrp/fee'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpFee' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XRP Blockchain Information
    # <h4>5 credits per API call.</h4><br/><p>Get XRP Blockchain last closed ledger index and hash.</p>
    # @param [Hash] opts the optional parameters
    # @return [XrpInfo]
    def xrp_get_last_closed_ledger(opts = {})
      data, _status_code, _headers = xrp_get_last_closed_ledger_with_http_info(opts)
      data
    end

    # Get XRP Blockchain Information
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XRP Blockchain last closed ledger index and hash.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpInfo, Integer, Hash)>] XrpInfo data, response status code and response headers
    def xrp_get_last_closed_ledger_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_last_closed_ledger ...'
      end
      # resource path
      local_var_path = '/v3/xrp/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpInfo' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_last_closed_ledger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Ledger
    # <h4>5 credits per API call.</h4><br/><p>Get ledger by sequence.</p>
    # @param i Sequence of XRP ledger.
    # @param [Hash] opts the optional parameters
    # @return [XrpLedger]
    def xrp_get_ledger(i, opts = {})
      data, _status_code, _headers = xrp_get_ledger_with_http_info(i, opts)
      data
    end

    # Get Ledger
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get ledger by sequence.&lt;/p&gt;
    # @param i Sequence of XRP ledger.
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpLedger, Integer, Hash)>] XrpLedger data, response status code and response headers
    def xrp_get_ledger_with_http_info(i, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_ledger ...'
      end
      # verify the required parameter 'i' is set
      if @api_client.config.client_side_validation && i.nil?
        fail ArgumentError, "Missing the required parameter 'i' when calling BlockchainXRPApi.xrp_get_ledger"
      end
      # resource path
      local_var_path = '/v3/xrp/ledger/{i}'.sub('{' + 'i' + '}', i.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpLedger' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_ledger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get XRP Transaction by hash
    # <h4>5 credits per API call.</h4><br/><p>Get XRP Transaction by transaction hash.</p>
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [XrpTx]
    def xrp_get_transaction(hash, opts = {})
      data, _status_code, _headers = xrp_get_transaction_with_http_info(hash, opts)
      data
    end

    # Get XRP Transaction by hash
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XRP Transaction by transaction hash.&lt;/p&gt;
    # @param hash Transaction hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpTx, Integer, Hash)>] XrpTx data, response status code and response headers
    def xrp_get_transaction_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_get_transaction ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling BlockchainXRPApi.xrp_get_transaction"
      end
      # resource path
      local_var_path = '/v3/xrp/transaction/{hash}'.sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpTx' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send XRP from address to address
    # <h4>10 credits per API call.</h4><br/> <p>Send XRP from account to account.<br/><br/> This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. </p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def xrp_transfer_blockchain(body, opts = {})
      data, _status_code, _headers = xrp_transfer_blockchain_with_http_info(body, opts)
      data
    end

    # Send XRP from address to address
    # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send XRP from account to account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def xrp_transfer_blockchain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_transfer_blockchain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXRPApi.xrp_transfer_blockchain"
      end
      # resource path
      local_var_path = '/v3/xrp/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_transfer_blockchain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create / Update / Delete XRP trust line
    # <h4>10 credits per API call.</h4><br/><p> <p>Create / Update / Delete XRP trust line between accounts to transfer private assets. By creating trustline for the first time, the asset is created automatically and can be used in the transactions.<br/> Account setting rippling must be enabled on the issuer account before the trust line creation to asset work correctly. Creating a trust line will cause an additional 5 XRP to be blocked on the account.<br/><br/> This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.</p> 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def xrp_trust_line_blockchain(body, opts = {})
      data, _status_code, _headers = xrp_trust_line_blockchain_with_http_info(body, opts)
      data
    end

    # Create / Update / Delete XRP trust line
    # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt; &lt;p&gt;Create / Update / Delete XRP trust line between accounts to transfer private assets. By creating trustline for the first time, the asset is created automatically and can be used in the transactions.&lt;br/&gt; Account setting rippling must be enabled on the issuer account before the trust line creation to asset work correctly. Creating a trust line will cause an additional 5 XRP to be blocked on the account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.&lt;/p&gt; 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def xrp_trust_line_blockchain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_trust_line_blockchain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockchainXRPApi.xrp_trust_line_blockchain"
      end
      # resource path
      local_var_path = '/v3/xrp/trust'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_trust_line_blockchain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate XRP account
    # <h4>5 credits per API call.</h4><br/> <p>Generate XRP account. Tatum does not support HD wallet for XRP, only specific address and private key can be generated.</p> 
    # @param [Hash] opts the optional parameters
    # @return [XrpWallet]
    def xrp_wallet(opts = {})
      data, _status_code, _headers = xrp_wallet_with_http_info(opts)
      data
    end

    # Generate XRP account
    # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate XRP account. Tatum does not support HD wallet for XRP, only specific address and private key can be generated.&lt;/p&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XrpWallet, Integer, Hash)>] XrpWallet data, response status code and response headers
    def xrp_wallet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockchainXRPApi.xrp_wallet ...'
      end
      # resource path
      local_var_path = '/v3/xrp/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'XrpWallet' 

      auth_names = opts[:auth_names] || ['X-Api-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainXRPApi#xrp_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
