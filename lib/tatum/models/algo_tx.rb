=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module Tatum
  class AlgoTx
    # rewards applied to close-remainder-to account.
    attr_accessor :close_rewards

    # closing amount for transaction.
    attr_accessor :closing_amount

    # Round when the transaction was confirmed.
    attr_accessor :confirmed_round

    # Transaction fee
    attr_accessor :fee

    # First valid round for this transaction.
    attr_accessor :first_valid

    # Hash of genesis block
    attr_accessor :genesis_hash

    # genesis block ID.
    attr_accessor :genesis_id

    # transaction ID
    attr_accessor :id

    # Offset into the round where this transaction was confirmed.
    attr_accessor :intra_round_offset

    # Last valid round for this transaction.
    attr_accessor :last_valid

    # Free form data
    attr_accessor :note

    # payment Transaction
    attr_accessor :payment_transaction

    # rewards applied to receiver account.
    attr_accessor :receiver_rewards

    # Time when the block this transaction is in was confirmed.
    attr_accessor :round_time

    # Sender's address
    attr_accessor :sender

    # rewards applied to sender account.
    attr_accessor :sender_rewards

    # signature
    attr_accessor :signature

    # indicates what type of transaction this is. Different types have differnet fields.
    attr_accessor :tx_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'close_rewards' => :'closeRewards',
        :'closing_amount' => :'closingAmount',
        :'confirmed_round' => :'confirmedRound',
        :'fee' => :'fee',
        :'first_valid' => :'firstValid',
        :'genesis_hash' => :'genesisHash',
        :'genesis_id' => :'genesisId',
        :'id' => :'id',
        :'intra_round_offset' => :'intraRoundOffset',
        :'last_valid' => :'lastValid',
        :'note' => :'note',
        :'payment_transaction' => :'paymentTransaction',
        :'receiver_rewards' => :'receiverRewards',
        :'round_time' => :'roundTime',
        :'sender' => :'sender',
        :'sender_rewards' => :'senderRewards',
        :'signature' => :'signature',
        :'tx_type' => :'txType'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'close_rewards' => :'Object',
        :'closing_amount' => :'Object',
        :'confirmed_round' => :'Object',
        :'fee' => :'Object',
        :'first_valid' => :'Object',
        :'genesis_hash' => :'Object',
        :'genesis_id' => :'Object',
        :'id' => :'Object',
        :'intra_round_offset' => :'Object',
        :'last_valid' => :'Object',
        :'note' => :'Object',
        :'payment_transaction' => :'Object',
        :'receiver_rewards' => :'Object',
        :'round_time' => :'Object',
        :'sender' => :'Object',
        :'sender_rewards' => :'Object',
        :'signature' => :'Object',
        :'tx_type' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Tatum::AlgoTx` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Tatum::AlgoTx`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'close_rewards')
        self.close_rewards = attributes[:'close_rewards']
      end

      if attributes.key?(:'closing_amount')
        self.closing_amount = attributes[:'closing_amount']
      end

      if attributes.key?(:'confirmed_round')
        self.confirmed_round = attributes[:'confirmed_round']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'first_valid')
        self.first_valid = attributes[:'first_valid']
      end

      if attributes.key?(:'genesis_hash')
        self.genesis_hash = attributes[:'genesis_hash']
      end

      if attributes.key?(:'genesis_id')
        self.genesis_id = attributes[:'genesis_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'intra_round_offset')
        self.intra_round_offset = attributes[:'intra_round_offset']
      end

      if attributes.key?(:'last_valid')
        self.last_valid = attributes[:'last_valid']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'payment_transaction')
        self.payment_transaction = attributes[:'payment_transaction']
      end

      if attributes.key?(:'receiver_rewards')
        self.receiver_rewards = attributes[:'receiver_rewards']
      end

      if attributes.key?(:'round_time')
        self.round_time = attributes[:'round_time']
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'sender_rewards')
        self.sender_rewards = attributes[:'sender_rewards']
      end

      if attributes.key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.key?(:'tx_type')
        self.tx_type = attributes[:'tx_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          close_rewards == o.close_rewards &&
          closing_amount == o.closing_amount &&
          confirmed_round == o.confirmed_round &&
          fee == o.fee &&
          first_valid == o.first_valid &&
          genesis_hash == o.genesis_hash &&
          genesis_id == o.genesis_id &&
          id == o.id &&
          intra_round_offset == o.intra_round_offset &&
          last_valid == o.last_valid &&
          note == o.note &&
          payment_transaction == o.payment_transaction &&
          receiver_rewards == o.receiver_rewards &&
          round_time == o.round_time &&
          sender == o.sender &&
          sender_rewards == o.sender_rewards &&
          signature == o.signature &&
          tx_type == o.tx_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [close_rewards, closing_amount, confirmed_round, fee, first_valid, genesis_hash, genesis_id, id, intra_round_offset, last_valid, note, payment_transaction, receiver_rewards, round_time, sender, sender_rewards, signature, tx_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Tatum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
