=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module Tatum
  class TronTx
    # Block, where which the transactio nwas included.
    attr_accessor :block_number

    attr_accessor :ret

    # List of signatures of the transaction.
    attr_accessor :signature

    # Transaction ID.
    attr_accessor :tx_id

    # Fee paid for the transaction.
    attr_accessor :net_fee

    # Usage of the network.
    attr_accessor :net_usage

    # Fee paid for the energy.
    attr_accessor :energy_fee

    # Usage of the energy.
    attr_accessor :energy_usage

    # Total energy used.
    attr_accessor :energy_usage_total

    # List of internal smart contract transactions.
    attr_accessor :internal_transactions

    attr_accessor :raw_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'block_number' => :'blockNumber',
        :'ret' => :'ret',
        :'signature' => :'signature',
        :'tx_id' => :'txID',
        :'net_fee' => :'netFee',
        :'net_usage' => :'netUsage',
        :'energy_fee' => :'energyFee',
        :'energy_usage' => :'energyUsage',
        :'energy_usage_total' => :'energyUsageTotal',
        :'internal_transactions' => :'internalTransactions',
        :'raw_data' => :'rawData'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'block_number' => :'Object',
        :'ret' => :'Object',
        :'signature' => :'Object',
        :'tx_id' => :'Object',
        :'net_fee' => :'Object',
        :'net_usage' => :'Object',
        :'energy_fee' => :'Object',
        :'energy_usage' => :'Object',
        :'energy_usage_total' => :'Object',
        :'internal_transactions' => :'Object',
        :'raw_data' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Tatum::TronTx` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Tatum::TronTx`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'block_number')
        self.block_number = attributes[:'block_number']
      end

      if attributes.key?(:'ret')
        self.ret = attributes[:'ret']
      end

      if attributes.key?(:'signature')
        if (value = attributes[:'signature']).is_a?(Array)
          self.signature = value
        end
      end

      if attributes.key?(:'tx_id')
        self.tx_id = attributes[:'tx_id']
      end

      if attributes.key?(:'net_fee')
        self.net_fee = attributes[:'net_fee']
      end

      if attributes.key?(:'net_usage')
        self.net_usage = attributes[:'net_usage']
      end

      if attributes.key?(:'energy_fee')
        self.energy_fee = attributes[:'energy_fee']
      end

      if attributes.key?(:'energy_usage')
        self.energy_usage = attributes[:'energy_usage']
      end

      if attributes.key?(:'energy_usage_total')
        self.energy_usage_total = attributes[:'energy_usage_total']
      end

      if attributes.key?(:'internal_transactions')
        if (value = attributes[:'internal_transactions']).is_a?(Array)
          self.internal_transactions = value
        end
      end

      if attributes.key?(:'raw_data')
        self.raw_data = attributes[:'raw_data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @block_number.nil?
        invalid_properties.push('invalid value for "block_number", block_number cannot be nil.')
      end

      if @ret.nil?
        invalid_properties.push('invalid value for "ret", ret cannot be nil.')
      end

      if @signature.nil?
        invalid_properties.push('invalid value for "signature", signature cannot be nil.')
      end

      if @tx_id.nil?
        invalid_properties.push('invalid value for "tx_id", tx_id cannot be nil.')
      end

      if @raw_data.nil?
        invalid_properties.push('invalid value for "raw_data", raw_data cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @block_number.nil?
      return false if @ret.nil?
      return false if @signature.nil?
      return false if @tx_id.nil?
      return false if @raw_data.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          block_number == o.block_number &&
          ret == o.ret &&
          signature == o.signature &&
          tx_id == o.tx_id &&
          net_fee == o.net_fee &&
          net_usage == o.net_usage &&
          energy_fee == o.energy_fee &&
          energy_usage == o.energy_usage &&
          energy_usage_total == o.energy_usage_total &&
          internal_transactions == o.internal_transactions &&
          raw_data == o.raw_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [block_number, ret, signature, tx_id, net_fee, net_usage, energy_fee, energy_usage, energy_usage_total, internal_transactions, raw_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Tatum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
