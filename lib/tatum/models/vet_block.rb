=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module Tatum
  class VetBlock
    # block number (height)
    attr_accessor :number

    # block identifier
    attr_accessor :id

    # RLP encoded block size in bytes
    attr_accessor :size

    # parent block ID
    attr_accessor :parent_id

    # block unix timestamp
    attr_accessor :timestamp

    # block gas limit (max allowed accumulative gas usage of transactions)
    attr_accessor :gas_limit

    # Address of account to receive block reward
    attr_accessor :beneficiary

    # accumulative gas usage of transactions
    attr_accessor :gas_used

    # sum of all ancestral blocks' score
    attr_accessor :total_score

    # root hash of transactions in the block
    attr_accessor :txs_root

    # supported txs features bitset
    attr_accessor :txs_features

    # root hash of accounts state
    attr_accessor :state_root

    # root hash of transaction receipts
    attr_accessor :receipts_root

    # the one who signed this block
    attr_accessor :signer

    # transactions IDs
    attr_accessor :transactions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'number' => :'number',
        :'id' => :'id',
        :'size' => :'size',
        :'parent_id' => :'parentID',
        :'timestamp' => :'timestamp',
        :'gas_limit' => :'gasLimit',
        :'beneficiary' => :'beneficiary',
        :'gas_used' => :'gasUsed',
        :'total_score' => :'totalScore',
        :'txs_root' => :'txsRoot',
        :'txs_features' => :'txsFeatures',
        :'state_root' => :'stateRoot',
        :'receipts_root' => :'receiptsRoot',
        :'signer' => :'signer',
        :'transactions' => :'transactions'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'number' => :'Object',
        :'id' => :'Object',
        :'size' => :'Object',
        :'parent_id' => :'Object',
        :'timestamp' => :'Object',
        :'gas_limit' => :'Object',
        :'beneficiary' => :'Object',
        :'gas_used' => :'Object',
        :'total_score' => :'Object',
        :'txs_root' => :'Object',
        :'txs_features' => :'Object',
        :'state_root' => :'Object',
        :'receipts_root' => :'Object',
        :'signer' => :'Object',
        :'transactions' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Tatum::VetBlock` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Tatum::VetBlock`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'gas_limit')
        self.gas_limit = attributes[:'gas_limit']
      end

      if attributes.key?(:'beneficiary')
        self.beneficiary = attributes[:'beneficiary']
      end

      if attributes.key?(:'gas_used')
        self.gas_used = attributes[:'gas_used']
      end

      if attributes.key?(:'total_score')
        self.total_score = attributes[:'total_score']
      end

      if attributes.key?(:'txs_root')
        self.txs_root = attributes[:'txs_root']
      end

      if attributes.key?(:'txs_features')
        self.txs_features = attributes[:'txs_features']
      end

      if attributes.key?(:'state_root')
        self.state_root = attributes[:'state_root']
      end

      if attributes.key?(:'receipts_root')
        self.receipts_root = attributes[:'receipts_root']
      end

      if attributes.key?(:'signer')
        self.signer = attributes[:'signer']
      end

      if attributes.key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          number == o.number &&
          id == o.id &&
          size == o.size &&
          parent_id == o.parent_id &&
          timestamp == o.timestamp &&
          gas_limit == o.gas_limit &&
          beneficiary == o.beneficiary &&
          gas_used == o.gas_used &&
          total_score == o.total_score &&
          txs_root == o.txs_root &&
          txs_features == o.txs_features &&
          state_root == o.state_root &&
          receipts_root == o.receipts_root &&
          signer == o.signer &&
          transactions == o.transactions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [number, id, size, parent_id, timestamp, gas_limit, beneficiary, gas_used, total_score, txs_root, txs_features, state_root, receipts_root, signer, transactions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Tatum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
