=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module Tatum
  class XlmTx
    # A unique identifier for this transaction.
    attr_accessor :id

    # A cursor value for use in pagination.
    attr_accessor :paging_token

    # Indicates if this transaction was successful or not.
    attr_accessor :successful

    # A hex-encoded SHA-256 hash of this transaction’s XDR-encoded form.
    attr_accessor :hash

    # The sequence number of the ledger that this transaction was included in.
    attr_accessor :ledger

    # The date this transaction was created.
    attr_accessor :created_at

    # The account that originates the transaction.
    attr_accessor :source_account

    # The source account’s sequence number that this transaction consumed.
    attr_accessor :source_account_sequence

    # The fee (in stroops) paid by the source account to apply this transaction to the ledger.
    attr_accessor :fee_paid

    attr_accessor :fee_charged

    # The maximum fee (in stroops) that the source account was willing to pay.
    attr_accessor :max_fee

    # The number of operations contained within this transaction.
    attr_accessor :operation_count

    # A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction.
    attr_accessor :envelope_xdr

    # A base64 encoded string of the raw TransactionResult XDR struct for this transaction.
    attr_accessor :result_xdr

    # A base64 encoded string of the raw TransactionMeta XDR struct for this transaction
    attr_accessor :result_meta_xdr

    # A base64 encoded string of the raw LedgerEntryChanges XDR struct produced by taking fees for this transaction.
    attr_accessor :fee_meta_xdr

    # The optional memo attached to a transaction. Usually used as an account distiguisher.
    attr_accessor :memo

    # The type of memo.
    attr_accessor :memo_type

    # An array of signatures used to sign this transaction.
    attr_accessor :signatures

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'paging_token' => :'paging_token',
        :'successful' => :'successful',
        :'hash' => :'hash',
        :'ledger' => :'ledger',
        :'created_at' => :'created_at',
        :'source_account' => :'source_account',
        :'source_account_sequence' => :'source_account_sequence',
        :'fee_paid' => :'fee_paid',
        :'fee_charged' => :'fee_charged',
        :'max_fee' => :'max_fee',
        :'operation_count' => :'operation_count',
        :'envelope_xdr' => :'envelope_xdr',
        :'result_xdr' => :'result_xdr',
        :'result_meta_xdr' => :'result_meta_xdr',
        :'fee_meta_xdr' => :'fee_meta_xdr',
        :'memo' => :'memo',
        :'memo_type' => :'memo_type',
        :'signatures' => :'signatures'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'paging_token' => :'Object',
        :'successful' => :'Object',
        :'hash' => :'Object',
        :'ledger' => :'Object',
        :'created_at' => :'Object',
        :'source_account' => :'Object',
        :'source_account_sequence' => :'Object',
        :'fee_paid' => :'Object',
        :'fee_charged' => :'Object',
        :'max_fee' => :'Object',
        :'operation_count' => :'Object',
        :'envelope_xdr' => :'Object',
        :'result_xdr' => :'Object',
        :'result_meta_xdr' => :'Object',
        :'fee_meta_xdr' => :'Object',
        :'memo' => :'Object',
        :'memo_type' => :'Object',
        :'signatures' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Tatum::XlmTx` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Tatum::XlmTx`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'paging_token')
        self.paging_token = attributes[:'paging_token']
      end

      if attributes.key?(:'successful')
        self.successful = attributes[:'successful']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'ledger')
        self.ledger = attributes[:'ledger']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'source_account')
        self.source_account = attributes[:'source_account']
      end

      if attributes.key?(:'source_account_sequence')
        self.source_account_sequence = attributes[:'source_account_sequence']
      end

      if attributes.key?(:'fee_paid')
        self.fee_paid = attributes[:'fee_paid']
      end

      if attributes.key?(:'fee_charged')
        self.fee_charged = attributes[:'fee_charged']
      end

      if attributes.key?(:'max_fee')
        self.max_fee = attributes[:'max_fee']
      end

      if attributes.key?(:'operation_count')
        self.operation_count = attributes[:'operation_count']
      end

      if attributes.key?(:'envelope_xdr')
        self.envelope_xdr = attributes[:'envelope_xdr']
      end

      if attributes.key?(:'result_xdr')
        self.result_xdr = attributes[:'result_xdr']
      end

      if attributes.key?(:'result_meta_xdr')
        self.result_meta_xdr = attributes[:'result_meta_xdr']
      end

      if attributes.key?(:'fee_meta_xdr')
        self.fee_meta_xdr = attributes[:'fee_meta_xdr']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'memo_type')
        self.memo_type = attributes[:'memo_type']
      end

      if attributes.key?(:'signatures')
        if (value = attributes[:'signatures']).is_a?(Array)
          self.signatures = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      memo_type_validator = EnumAttributeValidator.new('Object', ['MEMO_TEXT', 'MEMO_ID', 'MEMO_HASH', 'MEMO_RETURN'])
      return false unless memo_type_validator.valid?(@memo_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memo_type Object to be assigned
    def memo_type=(memo_type)
      validator = EnumAttributeValidator.new('Object', ['MEMO_TEXT', 'MEMO_ID', 'MEMO_HASH', 'MEMO_RETURN'])
      unless validator.valid?(memo_type)
        fail ArgumentError, "invalid value for \"memo_type\", must be one of #{validator.allowable_values}."
      end
      @memo_type = memo_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          paging_token == o.paging_token &&
          successful == o.successful &&
          hash == o.hash &&
          ledger == o.ledger &&
          created_at == o.created_at &&
          source_account == o.source_account &&
          source_account_sequence == o.source_account_sequence &&
          fee_paid == o.fee_paid &&
          fee_charged == o.fee_charged &&
          max_fee == o.max_fee &&
          operation_count == o.operation_count &&
          envelope_xdr == o.envelope_xdr &&
          result_xdr == o.result_xdr &&
          result_meta_xdr == o.result_meta_xdr &&
          fee_meta_xdr == o.fee_meta_xdr &&
          memo == o.memo &&
          memo_type == o.memo_type &&
          signatures == o.signatures
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, paging_token, successful, hash, ledger, created_at, source_account, source_account_sequence, fee_paid, fee_charged, max_fee, operation_count, envelope_xdr, result_xdr, result_meta_xdr, fee_meta_xdr, memo, memo_type, signatures].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Tatum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
