=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainAlgorandALGOApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainAlgorandALGOApi' do
  before do
    # run before each test
    @instance = Tatum::BlockchainAlgorandALGOApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainAlgorandALGOApi' do
    it 'should create an instance of BlockchainAlgorandALGOApi' do
      expect(@instance).to be_instance_of(Tatum::BlockchainAlgorandALGOApi)
    end
  end

  # unit tests for algo_node_get_driver
  # Access Algorand Algod GET node endpoints
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/&lt;/a&gt;. &lt;br/&gt; Example call for Get Block is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround&lt;/a&gt;. &lt;br/&gt; URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/blocks/16775567&lt;/pre&gt; &lt;/p&gt; 
  # @param x_api_key Tatum X-API-Key used for authorization.
  # @param [Hash] opts the optional parameters
  # @return [AlgoBlock]
  describe 'algo_node_get_driver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algo_node_indexer_get_driver
  # Access Algorand Indexer GET node endpoints
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum. You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/indexer/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/indexer/&lt;/a&gt;. &lt;br/&gt; Example call for Get Tx By ID is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid&lt;/a&gt;. &lt;br/&gt; URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/indexer/YOUR_API_KEY/v2/transactions/HNIQ76UTJYPOLZP5FWODYABBJPYPGJNEM2QEJSMDMQRWEKHEYJHQ&lt;/pre&gt; &lt;/p&gt; 
  # @param x_api_key Tatum X-API-Key used for authorization.
  # @param [Hash] opts the optional parameters
  # @return [AlgoTx]
  describe 'algo_node_indexer_get_driver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algo_node_post_driver
  # Access Algorand Algod POST node endpoints
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as a http-based url to connect directly to the Algorand node provided by Tatum.  You can check al available APIs here - &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/&lt;/a&gt;.  &lt;br/&gt;  Example call for Broadcast a raw transaction is described in the response. &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions&lt;/a&gt;.  &lt;br/&gt;  URL used for this call would be &lt;pre&gt;https://api-eu1.tatum.io/v3/algorand/node/algod/YOUR_API_KEY/v2/transactions&lt;/pre&gt;  &lt;/p&gt; 
  # @param body 
  # @param x_api_key Tatum X-API-Key used for authorization.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20060]
  describe 'algo_node_post_driver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algoand_broadcast
  # Broadcast signed Algorand transaction
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to Algorand blockchain. This method is used internally from Tatum KMS or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHashKMS]
  describe 'algoand_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_blockchain_transfer
  # Send ALGO from account to account
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send ALGO from account to account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2005]
  describe 'algorand_blockchain_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_generate_address
  # Generate Algorand account address from private key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate Algorand account deposit address from private key.&lt;/p&gt; 
  # @param priv private key of wallet.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20059]
  describe 'algorand_generate_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_generate_wallet
  # Generate Algorand wallet
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports Algorand wallets.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :mnemonic Mnemonic to use for generation of extended public and private keys.
  # @return [AlgoWallet]
  describe 'algorand_generate_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_get_balance
  # Get Algorand Account balance
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get Algorand account balance in ALGO.&lt;/p&gt; 
  # @param address Account address
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20061]
  describe 'algorand_get_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_get_block
  # Get Algorand block by block round number
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand block by block round number.&lt;/p&gt;
  # @param round_number Block round number
  # @param [Hash] opts the optional parameters
  # @return [AlgoBlock]
  describe 'algorand_get_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_get_current_block
  # Get current block number
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand current block number. This is the number of the latest block in the blockchain.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'algorand_get_current_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_get_pay_transactions_by_from_to
  # Get Algorand Transactions between from and to
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand transaction by specified period of time.&lt;/p&gt;
  # @param from Start timestamp in specified period of time
  # @param to End timestamp in specified period of time
  # @param [Hash] opts the optional parameters
  # @option opts [String] :limit page size for pagination
  # @option opts [String] :_next Algorand Next Token for getting the next page results
  # @return [AlgoTxsWithPagination]
  describe 'algorand_get_pay_transactions_by_from_to test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for algorand_get_transaction
  # Get Algorand Transaction
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Algorand transaction by transaction id.&lt;/p&gt;
  # @param txid Transaction id
  # @param [Hash] opts the optional parameters
  # @return [AlgoTx]
  describe 'algorand_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
