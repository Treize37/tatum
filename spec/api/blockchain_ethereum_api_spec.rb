=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::BlockchainEthereumApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainEthereumApi' do
  before do
    # run before each test
    @instance = SwaggerClient::BlockchainEthereumApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainEthereumApi' do
    it 'should create an instance of BlockchainEthereumApi' do
      expect(@instance).to be_instance_of(SwaggerClient::BlockchainEthereumApi)
    end
  end

  # unit tests for eth_blockchain_smart_contract_invocation
  # Invoke Smart Contract method
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Invoke any method on an existing Smart Contract. It is possibleto call read or write method on the Smsrt Contract defined via contractAddress. For read operations, data is returned, for write operations, transaction Id of the associated transaction is returned.&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse20016]
  describe 'eth_blockchain_smart_contract_invocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_blockchain_transfer
  # Send Ethereum / ERC20 from account to account
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send Ethereum or Tatum supported ERC20 token from account to account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse2005]
  describe 'eth_blockchain_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_broadcast
  # Broadcast signed Ethereum transaction
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to Ethereum blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [TransactionHashKMS]
  describe 'eth_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_estimate_gas
  # Estimate ethereum transaction fees
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Estimate gasLimit and gasPrice of the Ethereum transaction. Gas price is obtained from multiple sources + calculated based on the latest N blocks and the current mempool state. The &lt;b&gt;fast&lt;/b&gt; one is used by default. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse20014]
  describe 'eth_estimate_gas test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_estimate_gas_batch
  # Estimate multiple transaction fees
  # &lt;h4&gt;2 credits per API call + 2 credits per each gas estimation.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Estimate gasLimit and gasPrice of the Ethereum transaction. Gas price is obtained from multiple sources + calculated based on the latest N blocks and the current mempool state. The &lt;b&gt;fast&lt;/b&gt; one is used by default.&lt;br/&gt; Result is calculated  in the order of the request array items. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse20015]
  describe 'eth_estimate_gas_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_generate_address
  # Generate Ethereum account address from Extended public key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generates an Ethereum account deposit address from an Extended public key. The deposit address is generated for the specific index - each extended public key can generate up to 2^31 addresses starting from index 0 until 2^31 - 1.&lt;/p&gt; 
  # @param xpub Extended public key of wallet.
  # @param index Derivation index of the address to be generated.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse20012]
  describe 'eth_generate_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_generate_address_private_key
  # Generate Ethereum private key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generates the private key of an address from a mnemonic for a given derivation path index. The private key is generated for the specific index - each mnemonic can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [PrivKey]
  describe 'eth_generate_address_private_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_generate_wallet
  # Generate Ethereum wallet
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. A mnemonic phrase consists of 24 special words in a defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - a public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - an index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows the BIP44 specification and generates for Ethereum wallets with the derivation path m&#x27;/44&#x27;/60&#x27;/0&#x27;/0. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;. Generates a BIP44 compatible Ethereum wallet.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :mnemonic Mnemonic to use for generating extended public and private keys.
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [Wallet]
  describe 'eth_generate_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_balance
  # Get Ethereum account balance
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets an Ethereum account balance in ETH. This method does not display the balance of ERC20 or ERC721 tokens in the account.&lt;/p&gt;
  # @param address Account address
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [InlineResponse20013]
  describe 'eth_get_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_block
  # Get Ethereum block by hash
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets an Ethereum block-by-block hash or block number.&lt;/p&gt;
  # @param hash Block hash or block number
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [EthBlock]
  describe 'eth_get_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_current_block
  # Get current block number
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Gets the current Ethereum block number. This is the number of the latest block in the blockchain.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [BigDecimal]
  describe 'eth_get_current_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_internal_transaction_by_address
  # Get Ethereum internal transactions by address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get Ethereum internal transactions by address.&lt;br/&gt;&lt;/p&gt; 
  # @param address Account address
  # @param page_size Max number of items per page is 50.
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :offset Offset to obtain next page of the data.
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [Array<EthTxInternal>]
  describe 'eth_get_internal_transaction_by_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_transaction
  # Get Ethereum Transaction
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Ethereum transaction by transaction hash.&lt;/p&gt;
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [EthTx]
  describe 'eth_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_transaction_by_address
  # Get Ethereum transactions by address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Ethereum transactions by address. This includes incoming and outgoing transactions for the address.&lt;/p&gt;
  # @param address Account address
  # @param page_size Max number of items per page is 50.
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :offset Offset to obtain next page of the data.
  # @option opts [BigDecimal] :from Transactions from this block onwords will be included.
  # @option opts [BigDecimal] :to Transactions up to this block will be included.
  # @option opts [String] :sort Sorting of the data. ASC - oldest first, DESC - newest first.
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [Array<EthTx>]
  describe 'eth_get_transaction_by_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_get_transaction_count
  # Get count of outgoing Ethereum transactions
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get a number of outgoing Ethereum transactions for the address. When a transaction is sent, there can be multiple outgoing transactions, which are not yet processed by the blockchain. To distinguish between them, there is a counter called a nonce, which represents the order of the transaction in the list of outgoing transactions.&lt;/p&gt; 
  # @param address address
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [BigDecimal]
  describe 'eth_get_transaction_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eth_web3_driver
  # Web3 HTTP driver
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Use this endpoint URL as an http-based web3 driver to connect directly to the Ethereum node provided by Tatum. To learn more about Ethereum Web3, please visit &lt;a href&#x3D;\&quot;https://ethereum.org/en/developers/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Ethereum developers&#x27; guide.&lt;/a&gt;&lt;/p&gt; 
  # @param body 
  # @param x_api_key Tatum X-API-Key used for authorization.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :testnet_type Type of Ethereum testnet. Defaults to ropsten.
  # @return [Object]
  describe 'eth_web3_driver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
