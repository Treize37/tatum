=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainMultiTokenERC1155Api
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainMultiTokenERC1155Api' do
  before do
    # run before each test
    @instance = Tatum::BlockchainMultiTokenERC1155Api.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainMultiTokenERC1155Api' do
    it 'should create an instance of BlockchainMultiTokenERC1155Api' do
      expect(@instance).to be_instance_of(Tatum::BlockchainMultiTokenERC1155Api)
    end
  end

  # unit tests for add_multi_token_minter
  # Add Multi Token miter
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Add Multi Token minter.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Tokens these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'add_multi_token_minter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for burn_multi_token
  # Burn Multi Token
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Burn a fixed amount of Multi Tokens by id. This method destroys Multi Tokens from smart contract defined in contractAddress.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Token these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Algorand&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'burn_multi_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for burn_multi_token_batch
  # Burn Multi Token Batch
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Burn multiple Multi Token Tokens by id assigned to same address in one transaction. This method destroys any Multi Tokens token from smart contract defined in contractAddress.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Tokens these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'burn_multi_token_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deploy_multi_token
  # Deploy Multi Token Smart Contract.
  # &lt;p&gt;Deploy Multi Token Smart Contract. This method creates new ERC1155 Smart Contract (Multi Tokens) on the blockchain. Smart contract is standardized and audited. It is possible to mint, burn and transfer tokens. It is also possible to mint multiple tokens at once.&lt;br/&gt; Tatum now supports Multi Tokens on these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt;  This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'deploy_multi_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mint_multi_token
  # Mint Multi Token
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Mint a fixed amount of Multi Token and transfer it to destination account. Create and transfer any Multi Token token from smart contract defined in contractAddress. It is possible to add Metadata to the created token with a more detailed information about it.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Token these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Algorand&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'mint_multi_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mint_multi_token_batch
  # Mint Multi Token Batch
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Create a fixed amount of multiple Multi Tokens Tokens and transfer them to destination account in one transaction. Create and transfer Multi Tokens tokens from smart contract defined in contractAddress.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Tokens on these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'mint_multi_token_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_address_balance
  # Get Multi Tokens by Address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Tokens on address. Returns all tokenIDs of all contracts this address holds.&lt;/p&gt; 
  # @param chain Blockchain to work with
  # @param address Blockchain address
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [Array<InlineResponse20046>]
  describe 'multi_token_get_address_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_balance
  # Get Multi Token Account balance
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Tokens on Account. Returns tokenIDs of tokens Account holds.&lt;/p&gt; 
  # @param chain Blockchain to work with
  # @param address Account address
  # @param contract_address Multi Token contract address
  # @param token_id Multi Token tokenID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [Array<String>]
  describe 'multi_token_get_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_balance_batch
  # Get Multi Token Account balance Batch
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Tokens on Account. Returns tokenIDs of tokens Account holds.&lt;/p&gt; 
  # @param chain Blockchain to work with
  # @param contract_address Multi Token contract address
  # @param token_id Comma separated TokenIds to get balance for
  # @param address Comma separated addresses to get balance for
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [Array<String>]
  describe 'multi_token_get_balance_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_contract_address
  # Get Contract address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get Multi Token contract address from deploy transaction. This method is deprecated, use &lt;a href&#x3D;\&quot;#operation/SCGetContractAddress\&quot;&gt;Get contract address&lt;/a&gt; instead.&lt;/p&gt; 
  # @param chain Blockchain to work with
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse20044]
  describe 'multi_token_get_contract_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_metadata
  # Get Multi Token Token Metadata
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Token metadata.&lt;/p&gt;
  # @param chain Blockchain to work with
  # @param token Token ID
  # @param contract_address Multi Token contract address
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse20041]
  describe 'multi_token_get_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_transaction
  # Get Transaction
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Token transaction by transaction hash.&lt;/p&gt;
  # @param chain Blockchain to work with
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse20045]
  describe 'multi_token_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multi_token_get_transaction_by_address
  # Get Multi Token transactions by address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Multi Token (ERC-1155) transactions by address. This includes incoming and outgoing transactions for the address.&lt;/p&gt;
  # @param chain Blockchain to work with
  # @param address Account address
  # @param token_address Token address
  # @param page_size Max number of items per page is 50.
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :offset Offset to obtain next page of the data.
  # @option opts [BigDecimal] :from Transactions from this block onwords will be included.
  # @option opts [BigDecimal] :to Transactions up to this block will be included.
  # @return [Array<null>]
  describe 'multi_token_get_transaction_by_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_multi_token
  # Transfer Multi Token Token
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Transfer a certain amount of Multi Token from account to another account. Transfer Multi Tokens token from smart contract defined in contractAddress. Only 1 specific token with specified tokenId and value can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Token these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Algorand&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'transfer_multi_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_multi_token_batch
  # Transfer Multi Token Batch
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Transfer Multi Token Batch from account to various other accounts in one transaction. Transfer multiple Multi Tokens token from smart contract defined in contractAddress. Multiple token with specified tokenIds and values can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.&lt;br/&gt;&lt;br/&gt; Tatum now supports Multi Tokens these blockchains:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Ethereum&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Polygon (Matic)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Kcs (KCS)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Celo&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Harmony.ONE&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;Binance Smart Chain&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_testnet_type Type of testnet. Defaults to ropsten. Valid only for ETH invocations.
  # @return [InlineResponse2005]
  describe 'transfer_multi_token_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
