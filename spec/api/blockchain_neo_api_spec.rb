=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainNEOApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainNEOApi' do
  before do
    # run before each test
    @instance = Tatum::BlockchainNEOApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainNEOApi' do
    it 'should create an instance of BlockchainNEOApi' do
      expect(@instance).to be_instance_of(Tatum::BlockchainNEOApi)
    end
  end

  # unit tests for neo_account_detail
  # Get NEO Account balance
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get Balance of all assets (NEO, GAS, etc.) and tokens for the Account.&lt;/p&gt;
  # @param address Address to get balance
  # @param [Hash] opts the optional parameters
  # @return [NeoAccount]
  describe 'neo_account_detail test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_account_tx
  # Get NEO Account transactions
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get NEO Account transactions.&lt;/p&gt;
  # @param address 
  # @param [Hash] opts the optional parameters
  # @return [Array<NeoAccountTx>]
  describe 'neo_account_tx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_asset
  # Get Neo Asset details
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get information about asset.&lt;/p&gt;
  # @param asset Asset ID
  # @param [Hash] opts the optional parameters
  # @return [NeoAsset]
  describe 'neo_asset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_broadcast
  # Broadcast NEO transaction
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast NEO transaction. This method is used internally from Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHash]
  describe 'neo_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_claim_gas
  # Claim GAS
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Claim GAS for NEO account. Every account owner can claim for the GAS, which is produced for owning NEO on the address.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, it is possible to use the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHash]
  describe 'neo_claim_gas test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_contract_detail
  # Get NEO contract details
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get NEO contract details.&lt;/p&gt;
  # @param script_hash Hash of smart contract
  # @param [Hash] opts the optional parameters
  # @return [NeoContract]
  describe 'neo_contract_detail test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_generate_wallet
  # Generate NEO account
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate NEO account. Tatum does not support HD wallet for NEO, only specific address and private key can be generated.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @return [NeoWallet]
  describe 'neo_generate_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_get_block
  # Get NEO block
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get NEO block by hash or height.&lt;/p&gt;
  # @param hash Block hash or height.
  # @param [Hash] opts the optional parameters
  # @return [NeoBlock]
  describe 'neo_get_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_get_current_block
  # Get current NEO block
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get current NEO block.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'neo_get_current_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_get_transaction
  # Get NEO transaction by hash
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get NEO transaction by hash.&lt;/p&gt;
  # @param hash Transaction hash.
  # @param [Hash] opts the optional parameters
  # @return [NeoTx]
  describe 'neo_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_invoke_smart
  # Send NEO smart contract tokens
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send NEO smart contract tokens. It is possible to transfer custom NEO-based tokens to another account.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, it is possible to use the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHash]
  describe 'neo_invoke_smart test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_transfer
  # Send NEO assets
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send NEO assets from address to address. It is possible to send NEO and GAS in the same transaction.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, it is possible to use the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHash]
  describe 'neo_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for neo_tx_out
  # Get NEO unspent transaction outputs
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get NEO unspent transaction outputs.&lt;/p&gt;
  # @param tx_id Transaction ID.
  # @param index Index of output.
  # @param [Hash] opts the optional parameters
  # @return [NeoTxOut]
  describe 'neo_tx_out test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
