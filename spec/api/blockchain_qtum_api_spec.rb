=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainQTUMApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainQTUMApi' do
  before do
    # run before each test
    @instance = Tatum::BlockchainQTUMApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainQTUMApi' do
    it 'should create an instance of BlockchainQTUMApi' do
      expect(@instance).to be_instance_of(Tatum::BlockchainQTUMApi)
    end
  end

  # unit tests for estimate_fee
  # Get QTUM estimated gas fees
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get estimated gas fees&lt;/p&gt;
  # @param nblocks nblocks
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'estimate_fee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for estimate_fee_per_byte
  # Get QTUM estimated gas fees per byte
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get estimated gas fees per byte&lt;/p&gt;
  # @param nblocks nblocks
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'estimate_fee_per_byte test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_address_privatekey
  # Generate QTUM Address from private key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Generate Address by private key&lt;/p&gt;
  # @param key Private key
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20077]
  describe 'generate_address_privatekey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_private_key_from_mnemonic
  # Generate QTUM private key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value, which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows BIP44 specification and generates for Qtum wallet with derivation path defined by QTUM. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;. Generate BIP44 compatible QTUM wallet.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20076]
  describe 'generate_private_key_from_mnemonic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_qtum_paginated_transaction
  # Get QTUM Transactions by address
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM paginated transactions by address.&lt;/p&gt;
  # @param address Address
  # @param page_size pageSize
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :offset offset
  # @return [QtumIRawTransactions]
  describe 'get_qtum_paginated_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_qtum_transaction
  # Get QTUM Transaction
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM transaction by transaction hash.&lt;/p&gt;
  # @param id Transaction hash
  # @param [Hash] opts the optional parameters
  # @return [QtumIRawTransactionInfo]
  describe 'get_qtum_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_qtum_utx_os
  # Get UTXO
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get UTXOS by address&lt;/p&gt;
  # @param address address
  # @param [Hash] opts the optional parameters
  # @return [QtumIUTXO]
  describe 'get_qtum_utx_os test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_broadcast
  # Broadcast signed QTUM transaction
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to QTUM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHashKMS]
  describe 'qtum_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_generate_address
  # Generate QTUM account address from Extended public key
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate QTUM account deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate up to 2^31 addresses starting from index 0 until 2^31.&lt;/p&gt; 
  # @param xpub Extended public key of wallet.
  # @param i Derivation index of desired address to be generated.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20075]
  describe 'qtum_generate_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_generate_wallet
  # Generate QTUM wallet
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value, which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows BIP44 specification and generates for Qtum wallet with derivation path m&#x27;/44&#x27;/2301&#x27;/0&#x27;/0. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;.         Generate BIP44 compatible QTum wallet.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :mnemonic Mnemonic
  # @return [QtumWallet]
  describe 'qtum_generate_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_get_balance
  # Get QTUM Account balance
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM account balance in QTUM tokens on an account.&lt;/p&gt;
  # @param address Account address
  # @param [Hash] opts the optional parameters
  # @return [QtumIGetInfo]
  describe 'qtum_get_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_get_block
  # Get QTUM block by hash
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get BSC block by block hash or block number.&lt;/p&gt;
  # @param hash Block hash or block number
  # @param [Hash] opts the optional parameters
  # @return [QtumBlock]
  describe 'qtum_get_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qtum_get_current_block
  # Get current block number
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get QTUM current block number. This is the number of the latest block in the blockchain.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'qtum_get_current_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
