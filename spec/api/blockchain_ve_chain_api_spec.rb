=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainVeChainApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainVeChainApi' do
  before do
    # run before each test
    @instance = Tatum::BlockchainVeChainApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainVeChainApi' do
    it 'should create an instance of BlockchainVeChainApi' do
      expect(@instance).to be_instance_of(Tatum::BlockchainVeChainApi)
    end
  end

  # unit tests for vet_blockchain_transfer
  # Send VeChain from account to account
  # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send VET from account to account. Fee for the transaction is paid in VTHO.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHashKMS]
  describe 'vet_blockchain_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_broadcast
  # Broadcast signed VeChain transaction
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to VeChain blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHashKMS]
  describe 'vet_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_estimate_gas
  # Estimate VeChain Gas for transaction
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Estimate gas required for transaction.&lt;/p&gt;
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'vet_estimate_gas test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_generate_address
  # Generate VeChain account address from Extended public key
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate VeChain account deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate up to 2^31 addresses starting from index 0 until 2^31 - 1.&lt;/p&gt; 
  # @param xpub Extended public key of wallet.
  # @param index Derivation index of desired address to be generated.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20030]
  describe 'vet_generate_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_generate_address_private_key
  # Generate VeChain private key
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate private key of address from mnemonic for given derivation path index. Private key is generated for the specific index - each mnemonic can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PrivKey]
  describe 'vet_generate_address_private_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_generate_wallet
  # Generate VeChain wallet
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.&lt;br/&gt;Each address is identified by 3 main values:&lt;ul&gt;&lt;li&gt;Private Key - your secret value, which should never be revealed&lt;/li&gt;&lt;li&gt;Public Key - public address to be published&lt;/li&gt;&lt;li&gt;Derivation index - index of generated address&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Tatum follows BIP44 specification and generates for VeChain wallet with derivation path m&#x27;/44&#x27;/818&#x27;/0&#x27;/0. More about BIP44 HD wallets can be found here - &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\&quot;&gt;https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki&lt;/a&gt;. Generate BIP44 compatible VeChain wallet.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :mnemonic Mnemonic to use for generation of extended public and private keys.
  # @return [Wallet]
  describe 'vet_generate_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_balance
  # Get VeChain Account balance
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get VeChain Account balance in VET.&lt;/p&gt;
  # @param address Account address
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20031]
  describe 'vet_get_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_block
  # Get VeChain Block by hash
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get VeChain Block by block hash or block number.&lt;/p&gt;
  # @param hash Block hash or block number
  # @param [Hash] opts the optional parameters
  # @return [VetBlock]
  describe 'vet_get_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_current_block
  # Get VeChain current block
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get VeChain current block number.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'vet_get_current_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_energy
  # Get VeChain Account energy (VTHO)
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get VeChain Account energy in VTHO. VTHO is used for paying for the transaction fee.&lt;/p&gt;
  # @param address Account address
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20032]
  describe 'vet_get_energy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_transaction
  # Get VeChain Transaction
  # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get VeChain Transaction by transaction hash.&lt;/p&gt;
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @return [VetTx]
  describe 'vet_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vet_get_transaction_receipt
  # Get VeChain Transaction Receipt
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Get VeChain Transaction Receipt by transaction hash. Transaction receipt is available only after transaction is included in the block and contains information about paid fee or created contract address and much more.&lt;/p&gt; 
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @return [VetTxReceipt]
  describe 'vet_get_transaction_receipt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
