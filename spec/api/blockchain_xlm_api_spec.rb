=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::BlockchainXLMApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BlockchainXLMApi' do
  before do
    # run before each test
    @instance = Tatum::BlockchainXLMApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlockchainXLMApi' do
    it 'should create an instance of BlockchainXLMApi' do
      expect(@instance).to be_instance_of(Tatum::BlockchainXLMApi)
    end
  end

  # unit tests for xlm_broadcast
  # Broadcast signed XLM transaction
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Broadcast signed transaction to XLM blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries. It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionHashKMS]
  describe 'xlm_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_account_info
  # Get XLM Account info
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Account detail.&lt;/p&gt;
  # @param account Account address
  # @param [Hash] opts the optional parameters
  # @return [XlmAccount]
  describe 'xlm_get_account_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_account_tx
  # Get XLM Account transactions
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;List all XLM account transactions.&lt;/p&gt;
  # @param account Address of XLM account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pagination Paging token from the last transaction gives you next page
  # @return [Array<XlmTx>]
  describe 'xlm_get_account_tx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_fee
  # Get actual XLM fee
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain fee in 1/10000000 of XLM (stroop)&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [BigDecimal]
  describe 'xlm_get_fee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_last_closed_ledger
  # Get XLM Blockchain Information
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain last closed ledger.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @return [XlmLedger]
  describe 'xlm_get_last_closed_ledger test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_ledger
  # Get XLM Blockchain Ledger by sequence
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain ledger for ledger sequence.&lt;/p&gt;
  # @param sequence Sequence of the ledger.
  # @param [Hash] opts the optional parameters
  # @return [XlmLedger]
  describe 'xlm_get_ledger test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_ledger_tx
  # Get XLM Blockchain Transactions in Ledger
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Blockchain transactions in the ledger.&lt;/p&gt;
  # @param sequence Sequence of the ledger.
  # @param [Hash] opts the optional parameters
  # @return [Array<XlmTx>]
  describe 'xlm_get_ledger_tx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_get_transaction
  # Get XLM Transaction by hash
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get XLM Transaction by transaction hash.&lt;/p&gt;
  # @param hash Transaction hash
  # @param [Hash] opts the optional parameters
  # @return [XlmTx]
  describe 'xlm_get_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_transfer_blockchain
  # Send XLM from address to address
  # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Send XLM from account to account. It is possbile to send native XLM asset, or any other custom asset present on the network.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2005]
  describe 'xlm_transfer_blockchain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_trust_line_blockchain
  # Create / Update / Delete XLM trust line
  # &lt;h4&gt;10 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt; &lt;p&gt;Create / Update / Delete XLM trust line between accounts to transfer private assets. By creating trustline for the first time, the asset is created automatically and can be used in the transactions.&lt;br/&gt;&lt;br/&gt; This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#x27;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, &lt;a href&#x3D;\&quot;https://github.com/tatumio/tatum-kms\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Tatum KMS&lt;/a&gt; should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages. &lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2005]
  describe 'xlm_trust_line_blockchain test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for xlm_wallet
  # Generate XLM account
  # &lt;h4&gt;5 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Generate XLM account. Tatum does not support HD wallet for XLM, only specific address and private key can be generated.&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @return [XlmWallet]
  describe 'xlm_wallet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
