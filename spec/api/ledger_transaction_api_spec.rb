=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for Tatum::LedgerTransactionApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LedgerTransactionApi' do
  before do
    # run before each test
    @instance = Tatum::LedgerTransactionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LedgerTransactionApi' do
    it 'should create an instance of LedgerTransactionApi' do
      expect(@instance).to be_instance_of(Tatum::LedgerTransactionApi)
    end
  end

  # unit tests for get_transactions
  # Find transactions within the ledger.
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Find transactions across whole ledger.&lt;/p&gt;
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
  # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
  # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
  # @return [InlineResponse200]
  describe 'get_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transactions_by_account_id
  # Find transactions for account.
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for the account identified by the given account ID.&lt;/p&gt;
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
  # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
  # @option opts [BOOLEAN] :count Get the total transaction count based on the filter. Either count or pageSize is accepted.
  # @return [InlineResponse200]
  describe 'get_transactions_by_account_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transactions_by_customer_id
  # Find transactions for a customer across all of the customer&#x27;s accounts.
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for all accounts of the customer identified by the given internal customer ID.&lt;/p&gt;
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :page_size Max number of items per page is 50. Either count or pageSize is accepted.
  # @option opts [BigDecimal] :offset Offset to obtain the next page of data.
  # @option opts [BOOLEAN] :count Get total transaction count based on the filter. Either count or pageSize is accepted.
  # @return [InlineResponse200]
  describe 'get_transactions_by_customer_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transactions_by_reference
  # Find transactions with a given reference across all accounts.
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Finds transactions for all accounts with the given reference.&lt;/p&gt;
  # @param reference 
  # @param [Hash] opts the optional parameters
  # @return [Array<Transaction>]
  describe 'get_transactions_by_reference test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_transaction
  # Send payment
  # &lt;h4&gt;4 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Sends a payment within Tatum Private Ledger. All assets are settled instantly.&lt;br/&gt; When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.&lt;br/&gt; This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.&lt;br/&gt; If there is an insufficient balance in the sender account, no transaction is recorded.&lt;br/&gt; It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.&lt;br/&gt; The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionResult]
  describe 'send_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_transaction_batch
  # Send payment in batch
  # &lt;h4&gt;2 + 2 * N per API call. (N - count of transactions)&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Sends the N payments within Tatum Private Ledger. All assets are settled instantly.&lt;br/&gt; When a transaction is settled, 2 transaction records are created, 1 for each of the participants. These 2 records are connected via a transaction reference, which is the same for both of them.&lt;br/&gt; This method is only used for transferring assets between accounts within Tatum and will not send any funds to blockchain addresses.&lt;br/&gt; If there is an insufficient balance in the sender account, no transaction is recorded.&lt;br/&gt; It is possible to perform an anonymous transaction where the sender account is not visible for the recipient.&lt;br/&gt; The FIAT currency value of every transaction is calculated automatically. The FIAT value is based on the accountingCurrency of the account connected to the transaction and is available in the marketValue parameter of the transaction.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [BatchTransactionResult]
  describe 'send_transaction_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
