=begin
#Tatum API

## Authentication  <!-- ReDoc-Inject: <security-definitions> -->

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::LedgerVirtualCurrencyApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LedgerVirtualCurrencyApi' do
  before do
    # run before each test
    @instance = SwaggerClient::LedgerVirtualCurrencyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LedgerVirtualCurrencyApi' do
    it 'should create an instance of LedgerVirtualCurrencyApi' do
      expect(@instance).to be_instance_of(SwaggerClient::LedgerVirtualCurrencyApi)
    end
  end

  # unit tests for create_currency
  # Create new virtual currency
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Every virtual currency must be prefixed with &lt;b&gt;VC_&lt;/b&gt;.&lt;br/&gt; Every virtual currency must be pegged to existing FIAT or supported cryptocurrency. 1 unit of virtual currency has then the same amount as 1 unit of the base currency it is pegged to. It is possible to set a custom base rate for the virtual currency. (baseRate &#x3D; 2 &#x3D;&gt; 1 VC unit &#x3D; 2 basePair units)&lt;br/&gt; Tatum virtual currency acts as any other asset within Tatum. For creation of ERC20 token, see &lt;a href&#x3D;\\\&quot;#tatum-blockchain-api-erc20\\\&quot;&gt;ERC20 &lt;/a&gt;.&lt;br/&gt; This operation returns the newly created Tatum Ledger account with an initial balance set to the virtual currency&#x27;s total supply. Total supply can be changed in the future.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'create_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_currency
  # Get virtual currency
  # &lt;h4&gt;1 credit per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Get detail of virtual currency.&lt;p&gt;
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [VC]
  describe 'get_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mint_currency
  # Create new supply of virtual currency
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Create new supply of virtual currency linked on the given accountId. Method increases the total supply of the currency.&lt;br/&gt; This method creates Ledger transaction with operationType MINT with undefined counterAccountId.&lt;p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionResult]
  describe 'mint_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revoke_currency
  # Destroy supply of virtual currency
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt; &lt;p&gt;Destroy supply of virtual currency linked on the given accountId. Method decreases the total supply of the currency.&lt;br/&gt; This method creates Ledger transaction with operationType REVOKE with undefined counterAccountId.&lt;/p&gt; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [TransactionResult]
  describe 'revoke_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_currency
  # Update virtual currency
  # &lt;h4&gt;2 credits per API call.&lt;/h4&gt;&lt;br/&gt;&lt;p&gt;Change base pair and/or base rate of existing virtual currency.&lt;/p&gt;
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
